{"version":3,"file":"bundle.js","sources":["../source/namespace/index.js","../source/internal/object.js","../source/internal/array.js","../source/internal/function.js","../source/array/each.js","../source/internal/is.js","../source/array/asyncEach.js","../source/array/ensure.js","../source/array/flatten.js","../source/array/remove.js","../source/array/chunk.js","../source/array/rest.js","../source/array/clear.js","../source/array/right.js","../source/array/clone.js","../source/number/math.js","../source/array/sample.js","../source/array/compact.js","../source/array/shuffle.js","../source/array/initial.js","../source/array/smallest.js","../source/array/createrange.js","../source/array/intersect.js","../source/array/sortAlphabet.js","../source/array/difference.js","../source/array/drop.js","../source/array/isMatch.js","../source/array/sortedIndex.js","../source/array/largest.js","../source/array/sum.js","../source/array/eachAsync.js","../source/array/last.js","../source/array/take.js","../source/array/mapAsync.js","../source/array/unique.js","../source/array/union.js","../source/array/compactMapAsync.js","../source/array/numSort.js","../source/array/object.js","../source/array/without.js","../source/array/findIndex.js","../source/array/partition.js","../source/array/xor.js","../source/array/zip.js","../source/array/first.js","../source/array/rNumSort.js","../source/array/times.js","../source/browser/agent.js","../source/browser/event.js","../source/browser/isEnter.js","../source/browser/frag.js","../source/browser/append.js","../source/object/each.js","../source/object/zip.js","../source/browser/attribute.js","../source/utility/promise.js","../source/string/range.js","../source/browser/selector.js","../source/browser/import.js","../source/browser/ready.js","../source/browser/info.js","../source/browser/dimensions.js","../source/function/ifInvoke.js","../source/browser/batch.js","../source/utility/json.js","../source/browser/console.js","../source/browser/is.js","../source/collection/sortNewest.js","../source/collection/sortOldest.js","../source/collection/groupBy.js","../source/collection/countBy.js","../source/collection/indexBy.js","../source/collection/pluck.js","../source/collection/invoke.js","../source/collection/invokeAsync.js","../source/function/ary.js","../source/function/curry.js","../source/function/ntimes.js","../source/function/stub.js","../source/utility/each.js","../source/function/bind.js","../source/function/negate.js","../source/function/every.js","../source/function/over.js","../source/function/timing.js","../source/function/chain.js","../source/function/in.js","../source/function/nthArg.js","../source/function/rearged.js","../source/function/wrap.js","../source/number/is.js","../source/object/hasKeys.js","../source/object/pick.js","../source/object/compactKeys.js","../source/object/isMatch.js","../source/object/invert.js","../source/object/omit.js","../source/string/case.js","../source/string/replace.js","../source/string/sanitize.js","../source/string/tokenize.js","../source/string/truncate.js","../source/string/typography.js","../source/utility/assignDeep.js","../source/utility/cacheNativeMethod.js","../source/utility/ifNotEqual.js","../source/utility/isEqual.js","../source/utility/propertyMatch.js","../source/utility/toPath.js","../source/utility/uid.js","../source/utility/get.js","../source/utility/model.js","../source/utility/toggle.js","../source/utility/flow.js","../source/utility/flowAsync.js"],"sourcesContent":["let cacheSuper;\n/**\n * Acid Object accessible through $ default method is model.\n *\n * @function $\n * @category main\n * @returns {*} The return value of the superMethod. The default superMethod is model.\n *\n * @example\n * $('modelName', {example: 1});\n * // => {example: 1}\n */\nconst $ = (...args) => {\n  return cacheSuper(...args);\n};\n/**\n * Re-assigns the main method for $.\n *\n * @function superMethod\n * @category main\n * @memberof $\n * @param {Function} callable - The function that will become the main object's subroutine.\n * @returns {undefined} - Returns nothing.\n *\n * @example\n * superMethod($.get);\n * // => undefined\n * $('flow', $);\n * // => $.flow\n */\nconst superMethod = (callable) => {\n  cacheSuper = callable;\n};\n$.superMethod = superMethod;\nexport default $;\n","import acid from '../namespace/index';\nconst objectNative = Object;\n/**\n * Get object's keys.\n *\n * @function keys\n * @category object\n * @param {*} object - Object to pull keys from.\n * @returns {Array} Array of keys.\n *\n * @example\n * keys({a: 1, b: 2});\n * // => ['a', 'b']\n*/\nexport const keys = objectNative.keys;\n/**\n * Determines whether two values are the same value.\n *\n * @function is\n * @category object\n * @param {*} object - Value to compare to.\n * @param {*} object - A value to compare.\n * @returns {Boolean} A Boolean indicating whether or not the two arguments are the same value.\n *\n * @example\n * is('foo', 'foo');\n * // => true\n*/\nexport const is = objectNative.is;\n/**\n * Copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.\n *\n * @function assign\n * @category object\n * @param {Object} target - The target object.\n * @param {Object} sources - The source object(s).\n * @returns {Object} Returns the target object.\n *\n * @example\n * assign({b: 2}, {a: 1});\n * // => {b: 2, a: 1}\n*/\nexport const assign = objectNative.assign;\n/**\n * Returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.\n *\n * @function getOwnPropertyDescriptor\n * @category object\n * @param {Object} obj - The target object.\n * @param {String} property - The name of the property whose description is to be retrieved.\n * @returns {Object} A property descriptor of the given property if it exists on the object, undefined otherwise.\n *\n * @example\n * getOwnPropertyDescriptor({ bar: 42 }, 'foo');\n * // => { configurable: true, enumerable: true, value: 42, writable: true }\n*/\nexport const getOwnPropertyDescriptor = objectNative.getOwnPropertyDescriptor;\n/**\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n *\n * @function defineProperty\n * @category object\n * @param {Object} obj - The object on which to define the property.\n * @param {String} property - The name of the property whose description is to be retrieved.\n * @param {Object} descriptor - The descriptor for the property being defined or modified.\n * @returns {Object} The object that was passed to the function.\n *\n * @example\n * const obj = {};\n * defineProperty(obj, 'key', {\n *  enumerable: false,\n *  configurable: false,\n *  writable: false,\n *  value: 'static'\n * });\n*/\nexport const defineProperty = objectNative.defineProperty;\n/**\n * Returns an array of all properties (enumerable or not) found directly upon a given object.\n *\n * @function getOwnPropertyNames\n * @category object\n * @param {Object} obj - The object whose enumerable and non-enumerable own properties are to be returned.\n * @returns {Object} An array of strings that correspond to the properties found directly upon the given object.\n *\n * @example\n * getOwnPropertyNames({ 0: 'a', 1: 'b', 2: 'c' });\n * // => ['0', '1', '2']\n*/\nexport const getOwnPropertyNames = objectNative.getOwnPropertyNames;\n/**\n * Returns the amount of keys on the object.\n *\n * @function objectSize\n * @category object\n * @param {Object} obj - The target object.\n * @returns {number} The amount of keys.\n *\n * @example\n * objectSize({ 0: 'a', 1: 'b', 2: 'c' });\n * // => 3\n*/\nexport const objectSize = (target) => {\n  return keys(target).length;\n};\nassign(acid, {\n  assign,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  is,\n  keys,\n  objectSize\n});\n","import acid from '../namespace/index';\nimport { assign } from './object';\nconst arrayNative = Array;\n/**\n * Takes an array like object and creates a new Array from it.\n *\n * @function toArray\n * @category array\n * @param {*} arrayLike - Array like object.\n * @returns {*} new array.\n *\n * @example\n * toArray([1, 2, 3]);\n * // => [1, 2, 3]\n*/\nexport const toArray = arrayNative.from;\nassign(acid, {\n  toArray,\n});\n","import acid from '../namespace/index';\nimport { assign } from './object';\n/**\n * Calls a target function with arguments as specified.\n *\n * @function apply\n * @category function\n * @param {Function} target - The target function to call.\n * @param {*} thisArgument - Array like object.\n * @param {Array} argumentsList - An array-like object specifying the arguments with which target should be called.\n * @returns {*} The result of calling the given target function with the specified this value and arguments.\n *\n * @example\n * apply((a) => {return [this, a];}, 1, 2);\n * // => [1, 2]\n*/\nexport const apply = Reflect.apply;\nassign(acid, {\n  apply\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { hasValue } from '../internal/is';\n/**\n  * Iterates through the given array.\n  *\n  * @function eachArray\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n  * @returns {Object} The originally given array.\n  *\n  * @example\n  * eachArray([1, 2, 3], (item) => {\n  *   console.log(item);\n  * });\n  * // => [1, 2, 3]\n*/\nexport const eachArray = (callingArray, iteratee) => {\n  const arrayLength = callingArray.length;\n  for (let index = 0; index < arrayLength; index++) {\n    iteratee(callingArray[index], index, callingArray, arrayLength);\n  }\n  return callingArray;\n};\n/**\n  * Iterates through the given array in reverse.\n  *\n  * @function eachArrayRight\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n  * @returns {Object} The originally given array.\n  *\n  * @example\n  * eachArrayRight([1, 2, 3], (item) => {\n  *   console.log(item);\n  * });\n  * // => [3, 2, 1]\n*/\nexport const eachArrayRight = (callingArray, iteratee) => {\n  const arrayLength = callingArray.length;\n  for (let index = arrayLength - 1; index >= 0; index--) {\n    iteratee(callingArray[index], index, callingArray, arrayLength);\n  }\n  return callingArray;\n};\n/**\n  * Iterates through the given array while the iteratee returns true.\n  *\n  * @function whileArray\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n  * @returns {boolean} Returns the true if all values returned are true or false if one value returns false.\n  *\n  * @example\n  * whileArray([true, true, false], (item) => {\n  *   console.log(item);\n  *   return item;\n  * });\n  * //true\n  * //true\n  * // => false\n*/\nexport const whileArray = (callingArray, iteratee) => {\n  const arrayLength = callingArray.length;\n  for (let index = 0; index < arrayLength; index++) {\n    if (iteratee(callingArray[index], index, callingArray, arrayLength) === false) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n  * Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.\n  *\n  * @function filterArray\n  * @category array\n  * @type {Function}\n  * @category array\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Object} An array with properties that passed the test.\n  *\n  * @example\n  * filterArray([false, true, true], (item) => {\n  *   return item;\n  * });\n  * // => [true, true]\n*/\nexport const filterArray = (callingArray, iteratee, results = []) => {\n  eachArray(callingArray, (item, index, arrayOriginal, arrayLength) => {\n    if (iteratee(item, index, results, arrayOriginal, arrayLength) === true) {\n      results.push(item);\n    }\n  });\n  return results;\n};\nconst generateMap = (callable) => {\n  return (callingArray, iteratee, results = []) => {\n    callable(callingArray, (item, index, arrayOriginal, arrayLength) => {\n      results[index] = iteratee(item, index, results, arrayOriginal, arrayLength);\n    });\n    return results;\n  };\n};\n/**\n  * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n  *\n  * @function mapArray\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Object} An array of the same calling array's type.\n  *\n  * @example\n  * mapArray({a: 1, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {a: 2, b: 4, c: 6}\n*/\nexport const mapArray = generateMap(eachArray);\n/**\n  * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array in reverse.\n  *\n  * @function mapArrayRight\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Object} An array of the same calling array's type.\n  *\n  * @example\n  * mapArrayRight({a: 1, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {a: 2, b: 4, c: 6}\n*/\nexport const mapArrayRight = generateMap(eachArrayRight);\n/**\n  * Iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.\n  *\n  * @function compactMapArray\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Object} An array with mapped properties that are not null or undefined.\n  *\n  * @example\n  * compactMapArray([0, 2, 3], (item) => {\n  *   return item * 2;\n  * });\n  * // => [4, 6]\n*/\nexport const compactMapArray = (callingArray, iteratee, results = []) => {\n  eachArray(callingArray, (item, index, arrayOriginal, arrayLength) => {\n    const returned = iteratee(item, index, results, arrayOriginal, arrayLength);\n    if (hasValue(returned)) {\n      results.push(returned);\n    }\n  });\n  return results;\n};\n/**\n  * Iterates through the given and creates an object with all elements that pass the test implemented by the iteratee.\n  *\n  * @function mapWhile\n  * @category array\n  * @type {Function}\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Array} An array with properties that passed the test.\n  *\n  * @example\n  * mapWhile({a: false, b: true, c: true}, (item) => {\n  *   return true;\n  * });\n  * // => {b: true, c: true}\n*/\nexport const mapWhile = (callingArray, iteratee, results = []) => {\n  const arrayLength = callingArray.length;\n  for (let index = 0; index < arrayLength; index++) {\n    const returned = iteratee(callingArray[index], index, results, callingArray, arrayLength);\n    if (!returned) {\n      break;\n    }\n    results[index] = returned;\n  }\n  return results;\n};\nassign(acid, {\n  compactMapArray,\n  eachArray,\n  eachArrayRight,\n  filterArray,\n  mapArray,\n  mapArrayRight,\n  mapWhile,\n  whileArray,\n});\n","import acid from '../namespace/index';\nimport { eachArray } from '../array/each';\nimport { assign, objectSize } from './object';\nexport const objectStringGenerate = (objectName) => {\n  return `[object ${objectName}]`;\n};\n/**\n * Checks if the value is undefined.\n *\n * @function isUndefined\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isUndefined(undefined);\n * // => true\n*/\nexport const isUndefined = function(value) {\n  return value === undefined;\n};\n/**\n * Checks if the value is null.\n *\n * @function isNull\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isNull(null);\n * // => true\n*/\nexport const isNull = (value) => {\n  return value === null;\n};\n/**\n * Checks if the value is not null or undefined.\n *\n * @function hasValue\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * hasValue(1);\n * // => true\n*/\nexport const hasValue = (value) => {\n  return !isUndefined(value) && !isNull(value);\n};\nexport const isSameObjectGenerator = (type) => {\n  return (obj) => {\n    return (hasValue(obj)) ? obj.toString() === type : false;\n  };\n};\nexport const isConstructor = (nativeObject) => {\n  return (obj) => {\n    return (hasValue(obj)) ? obj.constructor === nativeObject : false;\n  };\n};\nexport const decimalCheck = /\\.|\\+/;\n/**\n * Checks if the value is a decimal.\n *\n * @function isDecimal\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isDecimal(1.01);\n * // => true\n*/\nexport const isDecimal = (value) => {\n  return value.toString().match(decimalCheck);\n};\n/**\n * Checks if the value is an array.\n *\n * @function isArray\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isArray([]);\n * // => true\n*/\nexport const isArray = Array.isArray;\n/**\n * Checks if the value is a string.\n *\n * @function isString\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isString('Lucy');\n * // => true\n*/\nexport const isString = isConstructor(String);\n/**\n * Checks if the value is a number.\n *\n * @function isNumber\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isNumber(1);\n * // => true\n*/\nexport const isNumber = isConstructor(Number);\n/**\n * Checks if the value is a plain object.\n *\n * @function isPlainObject\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isPlainObject({});\n * // => true\n*/\nexport const isPlainObject = (value) => {\n  if (hasValue(value)) {\n    return value.constructor.toString().trim()\n      .slice(9, 16) === 'Object(';\n  }\n  return false;\n};\n/**\n * Checks if the value is a plain object.\n *\n * @function isFunction\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isFunction({});\n * // => true\n*/\nexport const isFunction = (value) => {\n  return (hasValue(value)) ? value instanceof Function : false;\n};\n/**\n * Checks if the value includes something.\n *\n * @function has\n * @category utility\n * @param {Array|String} value - Object to be checked.\n * @param {*} search - Object that is being searched for.\n * @returns {boolean} True or false.\n *\n * @example\n * has('My name is Acidjs', 'Acidjs');\n * // => true\n*/\nexport const has = (value, ...search) => {\n  return value.includes(...search);\n};\n/**\n * Checks if the value has length greater than 0.\n *\n * @function hasLength\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * hasLength([1]);\n * // => true\n*/\nexport const hasLength = (value) => {\n  return Boolean(value.length);\n};\n/**\n * Checks if the value is empty.\n *\n * @function isEmpty\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isEmpty([]);\n * // => true\n*/\nexport const isEmpty = (obj) => {\n  if (isString(obj) || isArray(obj)) {\n    return !hasLength(obj);\n  } else if (isPlainObject(obj)) {\n    return !objectSize(obj);\n  }\n  return !hasValue(obj);\n};\nexport const regexGenerator = (regexType) => {\n  return (item) => {\n    return (hasValue(item)) ? regexType.test(item) : false;\n  };\n};\n/**\n * Checks if the string has a .css extension.\n *\n * @function isFileCSS\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isFileCSS('test.css');\n * // => true\n*/\nexport const isFileCSS = regexGenerator(/\\.css$/);\n/**\n * Checks if the string has a .json extension.\n *\n * @function isFileCSS\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isFileCSS('test.json');\n * // => true\n*/\nexport const isFileJSON = regexGenerator(/\\.json$/);\n/**\n * Checks if the string has a .js extension.\n *\n * @function isFileCSS\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isFileCSS('test.js');\n * // => true\n*/\nexport const isFileJS = regexGenerator(/\\.js$/);\n/**\n * Checks if the string has a '.'.\n *\n * @function hasDot\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * hasDot('test.js');\n * // => true\n*/\nexport const hasDot = regexGenerator(/\\./);\nexport const getExtensionRegex = /\\.([0-9a-z]+)/;\n/**\n * Return the file extension.\n *\n * @function getFileExtension\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {string} Returns the extension.\n *\n * @example\n * getFileExtension('test.js');\n * // => 'js'\n*/\nexport const getFileExtension = (string) => {\n  return string.match(getExtensionRegex);\n};\n/**\n * Checks if the value is a RegExp.\n *\n * @function isRegExp\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isRegExp(/test/);\n * // => true\n*/\n/**\n * Checks if the value is an Arguments object.\n *\n * @function isArguments\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isArguments([]);\n * // => false\n*/\n/**\n * Checks if the value is a Boolean.\n *\n * @function isBoolean\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isBoolean(true);\n * // => true\n*/\n/**\n * Checks if the value is a Date.\n *\n * @function isDate\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isDate(new Date());\n * // => true\n*/\n/**\n * Checks if the value is a Map.\n *\n * @function isMap\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isMap(new Map());\n * // => true\n*/\n/**\n * Checks if the value is a Set.\n *\n * @function isSet\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isSet(new Set());\n * // => true\n*/\n/**\n * Checks if the value is a WeakMap.\n *\n * @function isWeakMap\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isWeakMap(new WeakMap());\n * // => true\n*/\n/**\n * Checks if the value is a ArrayBuffer.\n *\n * @function isArrayBuffer\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isArrayBuffer(new ArrayBuffer());\n * // => true\n*/\n/**\n * Checks if the value is a Float32Array.\n *\n * @function isFloat32Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isFloat32Array(new Float32Array());\n * // => true\n*/\n/**\n * Checks if the value is a Float64Array.\n *\n * @function isFloat64Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isFloat64Array(new Float64Array());\n * // => true\n*/\n/**\n * Checks if the value is a Int8Array.\n *\n * @function isInt8Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isInt8Array(new Int8Array());\n * // => true\n*/\n/**\n * Checks if the value is a Int16Array.\n *\n * @function isInt16Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isInt16Array(new Int16Array());\n * // => true\n*/\n/**\n * Checks if the value is a Int32Array.\n *\n * @function isInt32Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isInt32Array(new Int32Array());\n * // => true\n*/\n/**\n * Checks if the value is a Uint8Array.\n *\n * @function isUint8Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isUint8Array(new Uint8Array());\n * // => true\n*/\n/**\n * Checks if the value is a Uint8ClampedArray.\n *\n * @function isUint8ClampedArray\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isUint8ClampedArray(new Uint8ClampedArray());\n * // => true\n*/\n/**\n * Checks if the value is a Uint16Array.\n *\n * @function isUint16Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isUint16Array(new Uint16Array());\n * // => true\n*/\n/**\n * Checks if the value is a Uint32Array.\n *\n * @function isUint32Array\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isUint32Array(new Uint32Array());\n * // => true\n*/\nconst nativeObjectNames = ['RegExp', 'Arguments', 'Boolean', 'Date', 'Map', 'Set', 'WeakMap',\n  'ArrayBuffer', 'Float32Array', 'Float64Array', 'Int8Array', 'Int16Array', 'Int32Array',\n  'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array'];\neachArray(nativeObjectNames, (item) => {\n  acid[`is${item}`] = isSameObjectGenerator(objectStringGenerate(item));\n});\nassign(acid, {\n  getFileExtension,\n  has,\n  hasDot,\n  hasLength,\n  hasValue,\n  isArray,\n  isDecimal,\n  isEmpty,\n  isFileCSS,\n  isFileJS,\n  isFileJSON,\n  isFunction,\n  isNull,\n  isNumber,\n  isPlainObject,\n  isString,\n  isUndefined,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Iterates through the given array of async function(s). Each async function is awaited as to ensure synchronous order and is given the supplied object.\n  *\n  * @function asyncEach\n  * @type {Function}\n  * @category Array\n  * @async\n  * @param {Array} callingArray - Array of async functions that will be looped through.\n  * Functions are given the supplied object, index, the calling array, and the array length.\n  * @param {*} object - The first argument given to each function.\n  * @returns {Object} The originally given array.\n  *\n  * @example\n  * asyncEach([async (item, index) =>{\n  *  console.log(item, index);\n  * }, async (item) =>{\n  *  console.log(item, index);\n  * }], {a:1});\n  * // {a:1} 0\n  * // {a:1} 1\n*/\nexport const asyncEach = async (callingArray, object) => {\n  const arrayLength = callingArray.length;\n  for (let index = 0; index < arrayLength; index++) {\n    const item = callingArray[index];\n    await item(object, index, callingArray, arrayLength);\n  }\n  return callingArray;\n};\nassign(acid, {\n  asyncEach,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { isArray } from '../internal/is';\n/**\n  * Ensures the object is an array. If not wraps in array.\n  *\n  * @function ensureArray\n  * @category array\n  * @type {Function}\n  * @param {*} object - Data to be checked.\n  * @returns {Array} - Returns an array.\n  *\n  * @example\n  * ensureArray('Hello');\n  * // => ['Hello']\n  *\n  * @example \n  * ensureArray({a:1, b:2})\n  * // => [{a:1, b:2}]\n*/\nexport const ensureArray = (object) => {\n  return (isArray(object)) ? object : [object];\n};\nassign(acid, {\n  ensureArray\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { ensureArray } from '../array/ensure';\nimport { isArray } from '../internal/is';\n/**\n  * Flattens an array up to the provided level.\n  *\n  * @function flatten\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to flatten.\n  * @param {number} [level = 1] - Number which determines how deep the array nest can be.\n  * @returns {Array} - Returns an array.\n  *\n  * @example\n  * flatten([1, [2, [3, [4]], 5]]);\n  *  // => [1, 2, [3, [4]], 5]\n*/\nexport const flatten = (arrayArg, level = 1) => {\n  let array = arrayArg;\n  for (let i = 0; i < level; i++) {\n    array = array.reduce((previousValue, currentValue) => {\n      return previousValue.concat(ensureArray(currentValue));\n    }, []);\n  }\n  return array;\n};\n/**\n  * Flattens an array to a single level.\n  *\n  * @function flattenDeep\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to flatten.\n  * @returns {Array} - Returns a completely flattened array.\n  *\n  * @example\n  * flattenDeep([1, [2, [3, [4]], 5]]);\n  *  // => [1, 2, 3, 4, 5]\n*/\nexport const flattenDeep = (array) => {\n  return array.reduce((previousValue, currentValue) => {\n    return previousValue.concat((isArray(currentValue)) ? flatten(currentValue) : currentValue);\n  }, []);\n};\nassign(acid, {\n  flatten,\n  flattenDeep,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Removes all occurrences of the passed in items from the array and returns the array. This mutates the given array. Clone the array if you desire to avoid mutation.\n  *\n  * @function remove\n  * @param {Array} array - Array to be mutated.\n  * @param {...(string|Array)} removeThese - Items to remove from the array.\n  * @returns {Array} The array this method was called on.\n  *\n  * @example\n  * remove([1, 2, 3, 3, 4, 3, 5], 1);\n  * // => [2, 3, 3, 4, 3, 5]\n  * @example\n  * remove([3, 3, 4, 5], 3, 4);\n  * // => [5]\n*/\nexport const remove = (array, ...removeThese) => {\n  let arrayLength = array.length;\n  for (let index = 0; index < arrayLength; index++) {\n    const item = array[index];\n    if (removeThese.includes(item)) {\n      array.splice(index, 1);\n      index--;\n      arrayLength--;\n    }\n  }\n  return array;\n};\n/**\n  * Removes items that pass the method's test. This mutates the given array. Clone the array if you desire to avoid mutation.\n  *\n  * @function removeBy\n  * @param {Array} array - Array to be mutated.\n  * @param {Function} method - Function used to check object. Return true to remove the value.\n  * @returns {Array} The array this method was called on.\n  *\n  * @example\n  * removeBy([1, 2, 3, 3, 4, 3, 5], (item) => { return Boolean(item % 2);}));\n  * // => [2, 4]\n*/\nexport const removeBy = (array, iteratee) => {\n  let arrayLength = array.length;\n  for (let index = 0; index < arrayLength; index++) {\n    const item = array[index];\n    if (iteratee(item, index)) {\n      array.splice(index, 1);\n      index--;\n      arrayLength--;\n    }\n  }\n  return array;\n};\nassign(acid, {\n  remove,\n  removeBy\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Chunks an array according to a user defined number.\n  *\n  * @function chunk\n  * @category Array\n  * @type {Function}\n  * @param {Array} array - Array to be chunked.\n  * @param {number} size - Number which determines the size of each chunk.\n  * @returns {Array} - A chunked version of the source array.\n  *\n  * @example\n  *  chunk([1,2,3], 1);\n  * // => [[1],[2],[3]]\n*/\nexport const chunk = (array, size = 1) => {\n  const chunked = [];\n  let index = 0;\n  array.forEach((item, key) => {\n    if (!(key % size)) {\n      chunked.push([]);\n      if (key) {\n        index++;\n      }\n    }\n    chunked[index].push(item);\n  });\n  return chunked;\n};\nassign(acid, {\n  chunk,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Extracts all items in array except the first and last item.\n  *\n  * @function rest\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to be sliced.\n  * @returns {Array} - Returns the aggregated array.\n  *\n  * @example\n  * rest([1, 2, 3, 4, 5]);\n  * // => [2, 3, 4, 5]\n*/\nexport const rest = (array) => {\n  return array.slice(1, array.length - 1);\n};\nassign(acid, {\n  rest\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Clears the values out of an array.\n  *\n  * @function clear\n  * @category Array\n  * @type {Function}\n  * @param {Array} array - Takes an array to be emptied.\n  * @returns {Array} The originally given array.\n  *\n  * @example\n  * clear([1,'B', Cat]);\n  * // => []\n*/\nexport const clear = (array) => {\n  array.length = 0;\n  return array;\n};\nassign(acid, {\n  clear,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Get the item at the supplied index starting at the end of the array.\n  *\n  * @function right\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to be sliced.\n  * @returns {*} - Returns the object at the evaluated position.\n  *\n  * @example\n  * right([1, 2, 3, 4, 5] , 1);\n  * // => 4\n*/\nexport const right = (array, amount) => {\n  return array[array.length - 1 - amount];\n};\nassign(acid, {\n  right\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Clears the values out of an array.\n  *\n  * @function cloneArray\n  * @category Array\n  * @type {Function}\n  * @param {Array} array - Takes an array to be cloned.\n  * @returns {Array} The originally given array.\n  *\n  * @example\n  * cloneArray([1,'B', Cat]);\n  * // => [1, 'B', Cat]\n*/\nexport const cloneArray = (array) => {\n  return array.slice();\n};\nassign(acid, {\n  cloneArray\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst mathNative = Math;\nconst floorMethod = mathNative.floor;\nconst randomMethod = mathNative.random;\n/**\n  * Adds two numbers.\n  *\n  * @function add\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the sum of the arguments.\n  *\n  * @example\n  * add(1, 1);\n  * // => 2\n*/\nexport const add = (number, value) => {\n  return number + value;\n};\n/**\n  * Subtracts two numbers.\n  *\n  * @function minus\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the difference of the arguments.\n  *\n  * @example\n  * minus(1, 1);\n  * // => 0\n*/\nexport const minus = (number, value) => {\n  return number - value;\n};\n/**\n  * Divides two numbers.\n  *\n  * @function divide\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the quotient of the arguments.\n  *\n  * @example\n  * divide(10, 5);\n  * // => 2\n*/\nexport const divide = (number, value) => {\n  return number / value;\n};\n/**\n  * Multiplies two numbers.\n  *\n  * @function multiply\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the product of the arguments.\n  *\n  * @example\n  * multiply(10, 5);\n  * // => 50\n*/\nexport const multiply = (number, value) => {\n  return number * value;\n};\n/**\n  *  Extracts the remainder between two numbers.\n  *\n  * @function remainder\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the remainder of the arguments.\n  *\n  * @example\n  * remainder(10, 6);\n  * // => 4\n*/\nexport const remainder = (number, value) => {\n  return number % value;\n};\n/**\n  *  Increments a number.\n  *\n  * @function increment\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @returns {number} - Returns an incremented version of the number.\n  *\n  * @example\n  * increment(10);\n  * // => 11\n*/\nexport const increment = (number) => {\n  return number + 1;\n};\n/**\n  *  Decrements a number.\n  *\n  * @function deduct\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @returns {number} - Returns a decremented version of the number.\n  *\n  * @example\n  * deduct(10);\n  * // => 9\n*/\nexport const deduct = (number) => {\n  return number - 1;\n};\n/**\n  *  Produces a random number between min (included) and max (excluded).\n  *\n  * @function randomArbitrary\n  * @category number\n  * @type {Function}\n  * @param {number} max - Establishes highest possible value for the random number.\n  * @param {number} [min = 0] - Establishes lowest possible value for the random number.\n  * @returns {number} - Returns random integer between the max and min range.\n  *\n  * @example\n  * randomArbitrary(10);\n  * // => 9.1\n*/\nexport const randomArbitrary = (max, min = 0) => {\n  return randomMethod() * (max - min) + min;\n};\n/**\n  *  Produces a random integer between min (included) and max (excluded).\n  *\n  * @function randomInt\n  * @category number\n  * @type {Function}\n  * @param {number} max - Establishes highest possible value for the random number.\n  * @param {number} [min = 0] - Establishes lowest possible value for the random number.\n  * @returns {number} - Returns random integer between the max and min range.\n  *\n  * @example\n  * randomInt(10);\n  * // => 9\n*/\nexport const randomInt = (max, min = 0) => {\n  return floorMethod(randomMethod() * (max - min)) + min;\n};\nassign(acid, {\n  add,\n  deduct,\n  divide,\n  increment,\n  minus,\n  multiply,\n  randomArbitrary,\n  randomInt,\n  remainder,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { randomInt } from '../number/math';\n/**\n  * Produce a random sample from the list. Pass a number to return n random elements from the list. Otherwise a single random item will be returned.\n  *\n  * @function sample\n  * @category array\n  * @param {Array} array - Array to pull sample(s).\n  * @returns {Array} An array of randomly pulled samples.\n  *\n  * @example\n  * sample([1, 2, 3, 4] , 2);\n  * // => [1, 3]\n*/\nexport const sample = (array, amount = 1) => {\n  if (amount === 1) {\n    return array[randomInt(array.length - 1, 0)];\n  }\n  const sampleArray = [];\n  const used = {};\n  let count = 0;\n  let index;\n  while (count < amount) {\n    index = randomInt(array.length - 1, 0);\n    if (!used[index]) {\n      sampleArray.push(sampleArray[index]);\n      used[index] = true;\n      count++;\n    }\n  }\n  return sampleArray;\n};\nassign(acid, {\n  sample\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { isString } from '../internal/is';\n/**\n  * Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey.\n  *\n  * @function compact\n  * @category Array\n  * @type {Function}\n  * @param {Array} array - Array to be compacted.\n  * @returns {Array} The new array of filtered values.\n  *\n  * @example\n  * compact([1,'B', Cat, false, null, 0 , '', undefined, NaN]);\n  * // => [1, 'B', Cat]\n*/\nexport const compact = (array) => {\n  return array.filter((item) => {\n    return isString(item) && !item.length ? false : item;\n  });\n};\nassign(acid, {\n  compact,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { randomInt } from '../number/math';\nimport { toArray } from '../internal/array';\n/**\n  * Shuffle an array and return a new array.\n  *\n  * @function shuffle\n  * @category array\n  * @param {Array} array - Array to be shuffled.\n  * @returns {Array} An array with the shuffled results.\n  *\n  * @example\n  * shuffle([1, 2, 3, 4]);\n  * // => [3, 4, 2, 1]\n*/\nexport const shuffle = (array, amount = array.length) => {\n  const shuffleArray = toArray(array);\n  let count = 0;\n  let index;\n  let value;\n  while (count < amount) {\n    index = randomInt(shuffleArray.length - 1, 0);\n    value = shuffleArray[count];\n    shuffleArray[count] = shuffleArray[index];\n    shuffleArray[index] = value;\n    count++;\n  }\n  return shuffleArray;\n};\nassign(acid, {\n  shuffle\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Takes all but the last item in the array.\n  *\n  * @function initial\n  * @category array\n  * @type {Function}\n  * @param {Array} array - Array to have items extracted from.\n  * @returns {Array} - Returns a completely flattened array.\n  *\n  * @example\n  * initial([1, 2, 3, 4, 5]);\n  * // => [1, 2, 3, 4]\n*/\nexport const initial = (array) => {\n  return array.slice(0, array.length - 1);\n};\nassign(acid, {\n  initial\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst mathNativeMin = Math.min;\n/**\n   * Plucks the smallest value from an array.\n   *\n   * @function smallest\n   * @category array\n   * @type {Function}\n   * @param {Array} array - Array from which smallest number is taken.\n   * @returns {number} The smallest number.\n   *\n   * @example\n   * smallest([1,2,3]);\n   * // => 1\n */\nexport const smallest = (array) => {\n  return mathNativeMin(...array);\n};\nassign(acid, {\n  smallest\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst rangeUp = (start, end, increment) => {\n  const rangeArray = [];\n  let position = start;\n  while (position < end) {\n    rangeArray.push(position);\n    position += increment;\n  }\n  return rangeArray;\n};\nconst rangeDown = (start, end, incrementArg) => {\n  const increment = (incrementArg < 0) ? incrementArg * -1 : incrementArg;\n  const rangeArray = [];\n  let position = start;\n  while (position < end) {\n    rangeArray.push(position);\n    position -= increment;\n  }\n  return rangeArray;\n};\n/**\n  *\n  *\n  * @type {Function} range\n  * @category array\n  * @param {Number} start - Value which determines the start of the range.\n  * @param {Number} end - Value which determines the end of the range.\n  * @param {Number} increment - Value which determines the rate of incrementation.\n  * @returns {Array}\n  *\n  * @example\n  * range([1,'B', Cat, false, null, 0 , '', undefined, NaN]);\n  * // => [1, 'B', Cat]\n*/\nexport const range = (start, end, increment = 1) => {\n  if (start < end) {\n    return rangeUp(start, end, increment);\n  } else {\n    return rangeDown(start, end, increment);\n  }\n};\n/**\n  *\n  *\n  * @type {Function} rangeRight\n  * @param {Number} start - Value which determines the start of the range.\n  * @param {Number} end - Value which determines the end of the range.\n  * @param {Number} increment - Value which determines the rate of incrementation.\n  * @returns {Array}\n  *\n  * @example\n  * rangeRight([1,'B', Cat, false, null, 0 , '', undefined, NaN]);\n  * // => [1, 'B', Cat]\n*/\nexport const rangeRight = (start, end, increment = 1) => {\n  return rangeDown(end, start, increment);\n};\nassign(acid, {\n  range,\n  rangeRight\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { compactMapArray, whileArray } from './each';\n/**\n * Returns an new array that is the [set intersection](http://en.wikipedia.org/wiki/Intersection_(set_theory))\n * of the array and the input array(s).\n *\n * @function intersect\n * @param {Array} array - Array to compare other arrays to.\n * @param {...Array} arrays - A variable number of arrays.\n * @category array\n * @returns {Array} The new array of unique values shared by all of the arrays.\n *\n * @example\n * intersect([1, 2, 3], [2, 3, 4]);\n * // => [2, 3]\n * @example\n * intersect([1, 2, 3], [101, 2, 50, 1], [2, 1]);\n * // => [1, 2]\n */\nexport const intersect = (array, ...arrays) => {\n  return compactMapArray(array, (item) => {\n    const shouldReturn = whileArray(arrays, (otherItem) => {\n      return otherItem.includes(item);\n    });\n    if (shouldReturn) {\n      return item;\n    }\n  });\n};\nassign(acid, {\n  intersect\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n   * Perform alphabetical sort on a collection with the provided key name. Mutates the array.\n   *\n   * @function sortAlphabetical\n   * @category array\n   * @type {Function}\n   * @param {Array} array - Array to be sorted.\n   * @returns {Array} The sorted array.\n   *\n   * @example\n   * sortAlphabetical([1,2,3]);\n   * // => 1\n */\nexport const sortAlphabetical = (collection, key) => {\n  return collection.sort((current, next) => {\n    const currentKey = current[key];\n    const nextKey = next[key];\n    if (currentKey < nextKey) {\n      return -1;\n    } else if (currentKey > nextKey) {\n      return 1;\n    }\n    return 0;\n  });\n};\nassign(acid, {\n  sortAlphabetical\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { compactMapArray } from './each';\nimport { flattenDeep } from './flatten';\n/**\n  * Checks for differences between arrays, then creates an array based on those differences.\n  *\n  * @function difference\n  * @category array\n  * @type {Function}\n  * @param {Array} array - Source array.\n  * @param {Array} compare - Array source array is compared against.\n  * @returns {Array} An array which contains the differences between the source and compare array.\n  *\n  * @example\n  * compact([1, 2, 3], [1, 2]);\n  * // => [3]\n*/\nexport const difference = (array, ...compares) => {\n  const compare = flattenDeep(compares);\n  return compactMapArray(array, (item) => {\n    if (!compare.includes(item)) {\n      return item;\n    }\n  });\n};\nassign(acid, {\n  difference\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Removes all items from an array after a specified index.\n  *\n  * @function drop\n  * @category array\n  * @type {Function}\n  * @param {Array} array - Source array.\n  * @param {number} amount - Amount of items to drop from the array.\n  * @param {number} [upTo = array.length] - Index to stop at.\n  * @returns {Array} An array with all values removed after a user defined index.\n  *\n  * @example\n  * drop([1, 2, 3], 1);\n  * // => [2, 3]\n*/\nexport const drop = (array, amount, upTo = array.length) => {\n  return array.splice(amount, upTo);\n};\n/**\n  * Removes all items from an array before a specified index.\n  *\n  * @function dropRight\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Source array.\n  * @param {number} amount - Amount of items to drop from the array.\n  * @param {number} [upTo = array.length] - Index to stop at.\n  * @returns {Array} An array with all values removed before a user defined index.\n  *\n  * @example\n  * dropRight([1, 2, 3], 1);\n  * // => [1, 2]\n*/\nexport const dropRight = (array, amount, upTo = array.length) => {\n  return drop(array, 0, upTo - amount);\n};\nassign(acid, {\n  drop,\n  dropRight\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { whileArray } from './each';\n/**\n   * Performs a shallow strict comparison between two objects.\n   *\n   * @function isMatchArray\n   * @type {Function}\n   * @category array\n   * @param {Array} source - Source object.\n   * @param {Array} compareArray - Object to compare to source.\n   * @returns {boolean} Returns the true or false.\n   *\n   * @example\n   * isMatchArray([1, 2, 3], [1, 2, 3]);\n   * // => true\n */\nexport const isMatchArray = (source, compareArray) => {\n  if (compareArray.length === source.length) {\n    return whileArray(source, (item, index) => {\n      return compareArray[index] !== item;\n    });\n  }\n  return false;\n};\nassign(acid, {\n  isMatchArray,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { whileArray } from './each';\n/**\n   * Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order.\n   *\n   * @function sortedIndex\n   * @category array\n   * @type {Function}\n   * @param {Array} array - Array to be sorted.\n   * @returns {Array} The sorted array.\n   *\n   * @example\n   * sortedIndex([1,2,3]);\n   * // => 1\n */\nconst sortedIndex = (array, n) => {\n  let min = 0;\n  whileArray(array, (item, index) => {\n    if (n > item) {\n      min = index;\n    } else {\n      return false;\n    }\n    return true;\n  });\n  if (min > 0) {\n    min = min + 1;\n  }\n  return min;\n};\nassign(acid, {\n  sortedIndex\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst mathNativeMax = Math.max;\n/**\n  * Plucks the largest value from an array.\n  *\n  * @function largest\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array from which largest number is taken.\n  * @returns {number} The largest number.\n  *\n  * @example\n  * largest([1,2,3]);\n  * // => 3\n*/\nexport const largest = (array) => {\n  return mathNativeMax(...array);\n};\nassign(acid, {\n  largest\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Reduces the values in an array into a single number.\n  *\n  * @function sum\n  * @category array\n  * @type {Function}\n  * @param {Array} array - Array to be reduced.\n  * @returns {number} - Returns a single value.\n  *\n  * @example\n  * sum([1, 2, 3, 4]);\n  * // => 10\n*/\nconst sum = (array) => {\n  return array.reduce((a, b) => {\n    return a + b;\n  }, 0);\n};\nassign(acid, {\n  sum\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Asynchronously Iterates through the given array. Each async function is awaited as to ensure synchronous order.\n  *\n  * @function eachAsync\n  * @category array\n  * @type {Function}\n  * @async\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n  * @returns {Object} The originally given array.\n  *\n  * @example\n  * eachAsync([3,4], async (item, index) =>{\n  *  console.log(item, index);\n  * });\n  * // => {3:0, 4:1}\n*/\nexport const eachAsync = async (callingArray, iteratee) => {\n  const arrayLength = callingArray.length;\n  for (let index = 0; index < arrayLength; index++) {\n    await iteratee(callingArray[index], index, callingArray, arrayLength);\n  }\n  return callingArray;\n};\n/**\n  * Asynchronously Iterates through the given array in reverse. Each async function is awaited as to ensure synchronous order.\n  *\n  * @function eachAsyncRight\n  * @category array\n  * @type {Function}\n  * @async\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n  * @returns {Object} The originally given array.\n  *\n  * @example\n  * eachAsyncRight([3,4], async (item, index) =>{\n  *  console.log(item, index);\n  * });\n  * // {3:0, 4:1}\n*/\nexport const eachAsyncRight = async (callingArray, iteratee) => {\n  const arrayLength = callingArray.length;\n  for (let index = arrayLength - 1; index >= 0; index--) {\n    await iteratee(callingArray[index], index, callingArray, arrayLength);\n  }\n  return callingArray;\n};\nassign(acid, {\n  eachAsync,\n  eachAsyncRight,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Extracts item(s) from an array starting from the last item in the array.\n  *\n  * @function last\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to have items extracted from.\n  * @param {number} [indexFrom = 0] - Value which determines how many items are extracted from the array.\n  * @returns {Array} Items from the array.\n  *\n  * @example\n  * last([1, 2, 3, 4, 5] , 2);\n  * // => [5, 4]\n  * @example\n  * last([1, 2, 3, 4, 5]);\n  * // => 5\n*/\nexport const last = (array, indexFrom) => {\n  const arrayLength = array.length;\n  return (indexFrom) ? array.slice(arrayLength - indexFrom, arrayLength) : array[arrayLength - 1];\n};\nassign(acid, {\n  last\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Returns a shallow copy of the array up to an amount.\n  *\n  * @function take\n  * @category array\n  * @type {Function}\n  * @param {Array} array - The array to be evaluated.\n  * @returns {Array} The aggregated array.\n  *\n  * @example\n  * take([1,2,3], 2);\n  * // => [1, 2]\n*/\nexport const take = (array, amount = 1) => {\n  return array.slice(0, amount);\n};\n/**\n  * Returns a shallow copy of the array up to an amount starting from the right.\n  *\n  * @function takeRight\n  * @type {Function}\n  * @param {Array} array - The array to be evaluated.\n  * @returns {Array} The aggregated array.\n  *\n  * @example\n  * takeRight([1,2,3], 2);\n  * // => [3, 2]\n*/\nexport const takeRight = (array, amount = 1) => {\n  return array.slice(array.length - amount, amount);\n};\nassign(acid, {\n  take,\n  takeRight\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachAsync } from './eachAsync';\n/**\n  * Asynchronously Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n  *\n  * @function mapAsync\n  * @category array\n  * @type {Function}\n  * @async\n  * @param {Array} callingArray - Array that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Object} An array of the same calling array's type.\n  *\n  * @example\n  * mapAsync({a: 1, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {a: 2, b: 4, c: 6}\n*/\nexport const mapAsync = async (array, iteratee) => {\n  const results = [];\n  await eachAsync(array, async (item, index, arrayLength) => {\n    results[index] = await iteratee(item, index, arrayLength);\n  });\n  return results;\n};\nassign(acid, {\n  mapAsync,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst onlyUnique = (value, index, array) => {\n  return array.indexOf(value) === index;\n};\nconst sortUnique = (item, index, array) => {\n  return item !== array[index - 1];\n};\n/**\n  * Filters the array down to unique elements.\n  *\n  * @function unique\n  * @category array\n  * @type {Function}\n  * @param {Array} array - The array to be filtered.\n  * @returns {Array} The filtered array.\n  *\n  * @example\n  * unique([1, 2, 2, 4]);\n  * // => [1, 2, 4]\n*/\nexport const unique = (array, isSorted) => {\n  if (isSorted) {\n    return array.filter(sortUnique);\n  }\n  return array.filter(onlyUnique);\n};\nassign(acid, {\n  unique\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from './each';\nimport { unique } from './unique';\n/**\n  * Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.\n  *\n  * @function union\n  * @category array\n  * @type {Function}\n  * @param {...Array} arrays - The arrays to be evaluated.\n  * @returns {Array} The aggregated array.\n  *\n  * @example\n  * union([1,2,4], [1,2,3]);\n  * // => [1, 2]\n*/\nexport const union = (...arrays) => {\n  const result = [];\n  eachArray(arrays, (array) => {\n    eachArray(unique(array), (item) => {\n      if (result.includes(item)) {\n        result.push(item);\n      }\n    });\n  });\n  return result;\n};\nassign(acid, {\n  union\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachAsync } from './eachAsync';\nimport { hasValue } from '../internal/is';\n/**\n  * Asynchronously performs a function on the items within an array.\n  *\n  * @function compactMapAsync\n  * @type {Function}\n  * @category array\n  * @async\n  * @param {Array} array - Array to be compacted.\n  * @param {Function} iteratee - Iteratee to be performed on array.\n  * @returns {Array} Array values after being put through an iterator.\n  *\n  * @example\n  * compactMapAsync([1, 2, 3, false], async () => {return item});\n  * // => [1, 2, 3]\n*/\nexport const compactMapAsync = async (array, iteratee) => {\n  const results = [];\n  let result;\n  await eachAsync(array, async (item, index, arrayLength) => {\n    result = await iteratee(item, index, results, arrayLength);\n    if (hasValue(result)) {\n      results.push(result);\n    }\n  });\n  return results;\n};\nassign(acid, {\n  compactMapAsync,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nexport const numericalCompare = (a, b) => {\n  return a - b;\n};\n/**\n  * Sorts an array in place using a numerical comparison algorithm from lowest to highest.\n  *\n  * @function numSort\n  * @category array\n  * @type {Function}\n  * @param {Array} numberList - Array of numbers.\n  * @returns {Array} The array this method was called on.\n  *\n  * @example\n  * numSort([10, 0, 2, 1]);\n  * // => [0, 1, 2, 10]\n*/\nexport const numSort = (numberList) => {\n  return numberList.sort(numericalCompare);\n};\nassign(acid, {\n  numSort\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from './each';\n/**\n  * Takes all but the last item in the array.\n  *\n  * @function arrayToObject\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to have items extracted from.\n  * @param {Array} properties - Array to have items extracted from.\n  * @returns {Array} - Returns a completely flattened array.\n  *\n  * @example\n  * arrayToObject([1, 2, 3], ['i', 'love', 'lucy']);\n  * // => {i:1, love:2, lucy: 3}\n*/\nexport const arrayToObject = (values, properties) => {\n  const sortedObject = {};\n  eachArray(values, (item, key) => {\n    sortedObject[properties[key]] = item;\n  });\n  return sortedObject;\n};\nassign(acid, {\n  arrayToObject\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Returns a copy of the array with all instances of the values removed.\n  *\n  * @function without\n  * @type {Function}\n  * @category array\n  * @param {Array} array - The array to be filtered.\n  * @param {Array} removeThese - Items to be removed.\n  * @returns {Array} The filtered array.\n  *\n  * @example\n  * without([1, 2, 2, 4], 4);\n  * // => [1, 2, 2]\n*/\nconst without = (array, removeThese) => {\n  return array.filter((item) => {\n    return !removeThese.includes(item);\n  });\n};\nassign(acid, {\n  without\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst findIndexCache = (element, index, array, indexMatch, propertyName) => {\n  if (element[propertyName] === indexMatch) {\n    return true;\n  }\n};\n/**\n  * Finds an object in a collection by the given id and property name.\n  *\n  * @function findItem\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Collection to be checked for an item.\n  * @param {number|string} id - The value to look for.\n  * @param {string} [propertyName = 'id'] - The name of the property to compare.\n  * @returns {Object} - The found object.\n  *\n  * @example\n  * findItem([{id: 1}, {id: 2}], 1);\n  * // => {id: 1}\n*/\nexport const findItem = (collection, id, propertyName = 'id') => {\n  const result = collection.find((element, index) => {\n    return findIndexCache(element, index, collection, id, propertyName);\n  });\n  return (result === -1) ? false : result;\n};\n/**\n  * Finds an object in a collection by the given id and property name and returns the array index of the object.\n  *\n  * @function findIndex\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Collection to be checked for an item.\n  * @param {number|string} id - The value to look for.\n  * @param {string} [propertyName = 'id'] - The name of the property to compare.\n  * @returns {number} - The index of the object.\n  *\n  * @example\n  * findIndex([{id: 1}, {id: 2}], 1);\n  * // => 0\n*/\nexport const findIndex = (collection, id, propertyName = 'id') => {\n  const result = collection.findIndex((element, index) => {\n    return findIndexCache(element, index, collection, id, propertyName);\n  });\n  return (result === -1) ? false : result;\n};\nassign(acid, {\n  findIndex,\n  findItem,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { compactMapArray } from './each';\n/**\n  * Split array into two arrays: one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.\n  *\n  * @function partition\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Takes an array to split.\n  * @param {Function} funct - Function run on each item in array.\n  * @returns {Array} - One array split into two arrays.\n  *\n  * @example\n  * partition([\n  *  {user: 'barney', age: 36, active: false},\n  *  {user: 'fred', age: 40, active: true},\n  *  {user: 'pebbles', age: 1,  active: false}\n  * ], (item) => { return item.active; });\n  * // => [['fred'], ['barney', 'pebbles']]\n*/\nexport const partition = (array, funct) => {\n  const failed = [];\n  return [\n    compactMapArray(array, (item) => {\n      if (funct(item)) {\n        return item;\n      }\n      failed.push(item);\n    }),\n    failed\n  ];\n};\nassign(acid, {\n  partition\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from './each';\nimport { unique } from './unique';\n/**\n  * Creates an array that is the symmetric difference of the provided arrays.\n  *\n  * @function xor\n  * @category array\n  * @type {Function}\n  * @param {Array} array - The array to be filtered.\n  * @param {Array} removeThese - Items to be removed.\n  * @returns {Array} The filtered array.\n  *\n  * @example\n  * xor([2, 1], [2, 3]);\n  * // => [1, 3]\n*/\nexport const xor = (arrays) => {\n  const xored = [];\n  eachArray(arrays, (array) => {\n    eachArray(unique(array), (item) => {\n      if (xored.includes(item)) {\n        xored.splice(xored.indexOf(item), 1);\n      } else {\n        xored.push(item);\n      }\n    });\n  });\n  return xored;\n};\nassign(acid, {\n  xor\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Merges together the values of each of the arrays with the values at the corresponding position.\n  *\n  * @function zip\n  * @type {Function}\n  * @category array\n  * @param {Array} properties - The arrays to process.\n  * @returns {Array} - Returns the new array of regrouped elements.\n  *\n  * @example\n  * zip(['a', 'b'], [1, 2], [true, false]);\n  * // => [['a', 1, true], ['b', 2, false]]\n*/\nexport const zip = (...args) => {\n  return args[0].map((item, index) => {\n    return args.map((array) => {\n      return array[index];\n    });\n  });\n};\n/**\n  * Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip array configuration.\n  *\n  * @function unZip\n  * @type {Function}\n  * @category array\n  * @param {Array} properties - The array of grouped elements to process.\n  * @returns {Array} - Returns the new array of regrouped elements.\n  *\n  * @example\n  * unZip([['a', 1, true], ['b', 2, false]]);\n  * // => [['a', 'b'], [1, 2], [true, false]]\n*/\nexport const unZip = (array) => {\n  return array[0].map((item, index) => {\n    return array.map((arraySet) => {\n      return arraySet[index];\n    });\n  });\n};\nassign(acid, {\n  unZip,\n  zip,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Takes the first or multiple items from an array.\n  *\n  * @function first\n  * @type {Function}\n  * @category array\n  * @param {Array} array - Array to extract from.\n  * @param {number} upTo - Number which determines how many items after the first item are extracted from the array.\n  * @returns {Array} - Returns an array.\n  *\n  * @example\n  * first([1, 2, 3]);\n  * // => [1]\n  *\n  * @example\n  * first([1, 2, 3], 2);\n  * // => [1, 2, 3]\n*/\nexport const first = (array, upTo) => {\n  return (upTo) ? array.slice(0, upTo) : array[0];\n};\nassign(acid, {\n  first\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nexport const numericalCompareReverse = (a, b) => {\n  return b - a;\n};\n/**\n  * Sorts an array in place using a reverse numerical comparison algorithm from highest to lowest.\n  *\n  * @function rNumSort\n  * @category array\n  * @param {Array} numberList - Array of numbers.\n  * @returns {Array} The array this method was called on.\n  *\n  * @example\n  * rNumSort([10, 0, 2, 1]);\n  * // => [10, 2, 1, 0]\n*/\nexport const rNumSort = (numberList) => {\n  return numberList.sort(numericalCompareReverse);\n};\nassign(acid, {\n  rNumSort\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { hasValue } from '../internal/is';\n/**\n  * Iterates based on a start index and an end index. The loop ends when the start index is equal to the end index.\n  *\n  * @function times\n  * @category array\n  * @type {Function}\n  * @param {number} startIndex - The number to start loop from.\n  * @param {number} endIndex - The number to stop at the loop.\n  * @param {Function} iteratee - Transformation function which is passed position, start, and end.\n  * @returns {undefined} Nothing.\n  *\n  * @example\n  * times(0, 3, (item) => {\n  *   console.log(item);\n  * });\n  * //Will log\n  * // 0\n  * // 1\n  * // 2\n  * // => undefined\n*/\nexport const times = (startIndex, endIndex, iteratee) => {\n  const start = (iteratee) ? startIndex : 0;\n  const end = (iteratee) ? endIndex : startIndex;\n  const iterateeMethod = iteratee || endIndex;\n  for (let position = start; position < end; position++) {\n    iterateeMethod(position, start, end);\n  }\n};\n/**\n  * Iterates based on a start index and end index. Creates an array with the results of the iteratee on every element in the calling array. The loop ends when the start index is equal to the end index.\n  *\n  * @function timesMap\n  * @category utility\n  * @type {Function}\n  * @param {number} startIndex - The number to start loop from.\n  * @param {number} endIndex - The number to stop at the loop.\n  * @param {Function} iteratee - Transformation function which is passed position, start, and end.\n  * @param {Array} [results = []] - Array that will be used to assign results.\n  * @returns {Object} An array with iteratee's returned values.\n  *\n  * @example\n  * timesMap(0, 3, (item) => {\n  *   console.log(item);\n  * });\n  * // => [0, 1, 2]\n*/\nexport const timesMap = (startIndex, endIndex, iteratee, results = []) => {\n  const start = (iteratee) ? startIndex : 0;\n  const end = (iteratee) ? endIndex : startIndex;\n  const iterateeMethod = iteratee || endIndex;\n  let result;\n  times(start, end, (position) => {\n    result = iterateeMethod(results, position, start, end);\n    if (hasValue(result)) {\n      results.push(result);\n    }\n  });\n  return results;\n};\nassign(acid, {\n  times,\n  timesMap,\n});\n","import acid from '../namespace/index';\nimport { eachArray } from '../array/each';\nimport { assign, keys } from '../internal/object';\n/**\n  * Checks to see of the browser agent has a string.\n  *\n  * @function isAgent\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {string} value - The string to search for.\n  * @returns {boolean} Returns true or false.\n  *\n  * @example\n  * isAgent('mobile');\n  * // => false\n*/\nexport const isAgent = (value) => {\n  return (value) ? isAgent[value] : keys(isAgent);\n};\nlet userAgentNormalized = navigator.userAgent.toLowerCase();\nuserAgentNormalized = userAgentNormalized.replace(/_/g, '.');\nuserAgentNormalized = userAgentNormalized.replace(/[#_,;()]/g, '');\nconst userAgentSplit = userAgentNormalized.split(/ |\\//);\neachArray(userAgentSplit, (item) => {\n  isAgent[item] = true;\n});\nassign(acid, {\n  isAgent\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Attaches an event listener to a node.\n  *\n  * @function eventAdd\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {Node} node - Given node.\n  * @param {string} type - A string representing the event type.\n  * @param {Object|Function} listener - The object which receives a notification when an event of the specified type occurs.\n  * @param {Object} options - An options object that specifies characteristics about the event listener.\n  * @returns {Node} - Returns given node.\n  *\n  * @example\n  * eventAdd(document.body, 'click', () => {console.log('CLICKED');});\n  * // = > document.body\n*/\nexport const eventAdd = (node, ...args) => {\n  node.addEventListener(...args);\n  return node;\n};\n/**\n  * Attaches an event listener to a node.\n  *\n  * @function eventRemove\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {Node} node - Given node.\n  * @param {string} type - A string representing the event type.\n  * @param {Object|Function} listener - An object|function representing the listener.\n  * @param {Object} options - An options object that specifies characteristics about the event listener.\n  * @returns {undefined} - Undefined.\n  *\n  * @example\n  * eventRemove(document.body, () => {console.log('CLICKED');});\n  * // = > Undefined\n*/\nexport const eventRemove = (node, ...args) => {\n  node.removeEventListener(...args);\n  return node;\n};\nassign(acid, {\n  eventAdd,\n  eventRemove,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Checks if the keycode of the event is strictly equal to 13.\n  *\n  * @function isEnter\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {Object} eventObject - Object to be checked.\n  * @returns {boolean} Returns true if the keycode property of the object equals 13.\n  *\n  * @example\n  * isEnter('click');\n  * // => false\n*/\nexport const isEnter = (eventObject) => {\n  return eventObject.keyCode === 13;\n};\nassign(acid, {\n  isEnter\n});\n","/**\n  * Create a document fragment.\n  *\n  * @function createFragment\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @ignore\n  * @returns {Fragment} Returns a new document fragment.\n*/\nexport const createFragment = document.createDocumentFragment.bind(document);\n","/**\n  * Append a DOM node.\n  *\n  * @function append\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @ignore\n  * @param {Node} parentNode - The parent node.\n  * @param {Node} child - The node to be appended.\n  * @returns {undefined} Returns the child.\n*/\nexport const append = (parentNode, child) => {\n  parentNode.appendChild(child);\n  return child;\n};\n","import acid from '../namespace/index';\nimport { hasValue } from '../internal/is';\nimport { assign, keys } from '../internal/object';\nimport { eachArray, whileArray } from '../array/each';\n/**\n  * Iterates through the given object.\n  *\n  * @function eachObject\n  * @category object\n  * @type {Function}\n  * @param {Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys.\n  * @returns {Object|Function} The originally given object.\n  *\n  * @example\n  * eachObject({a: 1, b: 2, c: 3}, (item) => {\n  *   console.log(item);\n  * });\n  * // => {a: 1, b: 2, c: 3}\n*/\nexport const eachObject = (thisObject, iteratee) => {\n  const objectKeys = keys(thisObject);\n  eachArray(objectKeys, (key, index, array, propertyCount) => {\n    iteratee(thisObject[key], key, thisObject, propertyCount, objectKeys);\n  });\n};\n/**\n  * Iterates through the given object while the iteratee returns true.\n  *\n  * @function whileObject\n  * @type {Function}\n  * @param {Object} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n  * @returns {boolean} Returns the true if all values returned are true or false if one value returns false.\n  *\n  * @example\n  * whileObject({a: false, b: true, c: true}, (item) => {\n  *   return item;\n  *  });\n  * // => false\n*/\nexport const whileObject = (callingObject, iteratee, results = {}) => {\n  return whileArray(callingObject, (item, key, thisObject, propertyCount, objectKeys) => {\n    return iteratee(item, key, results, thisObject, propertyCount, objectKeys);\n  });\n};\n/**\n  * Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.\n  *\n  * @function filterObject\n  * @type {Function}\n  * @param {Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Object|Function} An object with properties that passed the test.\n  *\n  * @example\n  * filterObject({a: false, b: true, c: true}, (item) => {\n  *   return true;\n  * });\n  * // => {b: true, c: true}\n*/\nexport const filterObject = (object, iteratee, results = {}) => {\n  eachObject(object, (item, key, thisObject, propertyCount, objectKeys) => {\n    if (iteratee(item, key, results, thisObject, propertyCount, objectKeys) === true) {\n      results[key] = item;\n    }\n  });\n  return results;\n};\n/**\n  * Iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.\n  *\n  * @function mapObject\n  * @category utility\n  * @type {Function}\n  * @param {Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Object|Function} An object of the same calling object's type.\n  *\n  * @example\n  * mapObject({a: 1, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {a: 2, b: 4, c: 6}\n*/\nexport const mapObject = (object, iteratee, results = {}) => {\n  eachObject(object, (item, key, thisObject, propertyCount, objectKeys) => {\n    results[key] = iteratee(item, key, results, thisObject, propertyCount, objectKeys);\n  });\n  return results;\n};\n/**\n  * Iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n  *\n  * @function compactMapObject\n  * @type {Function}\n  * @param {Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Object|Function} An object with mapped properties that are not null or undefined.\n  *\n  * @example\n  * compactMapObject({a: 0, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {b: 4, c: 6}\n*/\nexport const compactMapObject = (object, iteratee, results = {}) => {\n  eachObject(object, (item, key, thisObject, propertyCount, objectKeys) => {\n    const result = iteratee(item, key, results, propertyCount, objectKeys);\n    if (hasValue(result)) {\n      results[key] = result;\n    }\n  });\n  return results;\n};\nassign(acid, {\n  compactMapObject,\n  eachObject,\n  filterObject,\n  mapObject,\n  whileObject,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from '../array/each';\nimport { eachObject } from './each';\n/**\n  * Creates an object from two arrays, one of property identifiers and one of corresponding values.\n  *\n  * @function zipObject\n  * @type {Function}\n  * @category object\n  * @param {Array} properties - The property identifiers.\n  * @param {Array} values - The property values.\n  * @returns {Object} - Returns the new object.\n  *\n  * @example\n  * zipObject(['a', 'b'], [1, 2]);\n  * // => { 'a': 1, 'b': 2 }\n*/\nexport const zipObject = (properties, values) => {\n  const zipedObject = {};\n  eachArray(properties, (item, key) => {\n    zipedObject[item] = values[key];\n  });\n  return zipedObject;\n};\n/**\n  * Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip object configuration.\n  *\n  * @function unZipObject\n  * @type {Function}\n  * @param {Object} object - The object to process.\n  * @returns {Array} - Returns two arrays one of keys and the other of values inside a single array.\n  *\n  * @example\n  * unZipObject({ 'a': 1, 'b': 2 });\n  * // => [['a', 'b'], [1, 2]]\n*/\nexport const unZipObject = (object) => {\n  const keys = [];\n  const values = [];\n  eachObject(object, (item, key) => {\n    keys.push(key);\n    values.push(item);\n  });\n  return [keys, values];\n};\nassign(acid, {\n  unZipObject,\n  zipObject,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachObject } from '../object/each';\nimport { isArray } from '../internal/is';\nimport { mapArray } from '../array/each';\nimport { zipObject } from '../object/zip';\n/**\n  * Assign attributes to a DOM node.\n  *\n  * @function nodeAttribute\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @async\n  * @param {Node} node - The DOM node.\n  * @param {Object|Array} object - Object with key being the attribute name and the value being the attribute value. If an array is given it will get the values corresponding to the array items.\n  * @returns {Object|Node} If using an array this returns an object of attribute names as keys and their values as the property value. If using an object this will return the provided node.\n  *\n  * @example\n  * nodeAttribute(document.body, { 'data-example': 'test'});\n*/\nexport const nodeAttribute = (node, object) => {\n  if (isArray(object)) {\n    return zipObject(object, mapArray(object, (item) => {\n      return node.getAttribute(item);\n    }));\n  }\n  eachObject(object, (item, key) => {\n    node.setAttribute(key, item);\n  });\n  return node;\n};\nassign(acid, {\n  nodeAttribute\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * A wrapper around the promise constructor.\n  *\n  * @function promise\n  * @type {Function}\n  * @category utility\n  * @param {Function} callback - Function to be called back.\n  * @returns {Object} - A constructor with a callback function.\n  *\n  * @example\n  * promise((a) => {});\n  * // => promise((a) => {})\n*/\nexport const promise = (callback) => {\n  return new Promise(callback);\n};\nassign(acid, {\n  promise\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Inserts text into a string at a given position.\n  *\n  * @function insertInRange\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to insert the text into.\n  * @param {number} index - Point of insertion.\n  * @param {string} text - The string to be inserted.\n  * @returns {string} - The string with the text inserted at the given point.\n  *\n  * @example\n  * insertInRange('A from Lucy.', 1, ' tab');\n  * // => 'A tab from Lucy.'\n*/\nexport const insertInRange = (string, index, text) => {\n  return string.slice(0, index) + text + string.slice(index, string.length);\n};\n/**\n  * Plucks a letter using the index starting from the right.\n  *\n  * @function rightString\n  * @type {Function}\n  * @param {string} string - String to extract the letter from.\n  * @param {number} [index=1] - The starting position.\n  * @returns {string} - A letter at the given index.\n  *\n  * @example\n  * rightString('rightString');\n  * // => 'g'\n  *\n  * rightString('rightString', 2);\n  * // => 'n'\n*/\nexport const rightString = (string, index = 1) => {\n  return string[string.length - index];\n};\n/**\n  * Splits up a string into chunks.\n  *\n  * @function chunkString\n  * @type {Function}\n  * @param {string} string - String to chunked.\n  * @param {number} [size] - The max string length per chunk.\n  * @returns {Array} - An array with strings that are <= size parameter.\n  *\n  * @example\n  * chunkString('chunk', 2);\n  * // => ['ch', 'un', 'k']\n*/\nexport const chunkString = (string, size) => {\n  return string.match(new RegExp(`(.|[\\r\\n]){1, ${size}}`, 'g'));\n};\n/**\n  * Truncates everything before the index starting from the right.\n  *\n  * @function initialString\n  * @type {Function}\n  * @param {string} string - String to extract the initial letters from.\n  * @param {number} [index=1] - Starting point from the right.\n  * @returns {string} A string with the characters before the index starting from the right.\n  *\n  * @example\n  * initialString('initialString');\n  * // => 'initialStrin'\n  *\n  * initialString('initialString', 2);\n  * // => 'initialStri'\n*/\nexport const initialString = (string, index = 1) => {\n  return string.slice(0, index * -1);\n};\n/**\n  * Truncates everything after a index.\n  *\n  * @function restString\n  * @type {Function}\n  * @param {string} string - String to extract the rest of the letters from.\n  * @param {number} [index=1] - Starting point.\n  * @returns {string} - A string without the characters up-to to the index.\n  *\n  * @example\n  * restString('restString');\n  * // => 'estString'\n  *\n  * restString('restString', 2);\n  * // => 'stString'\n*/\nexport const restString = (string, index = 1) => {\n  return string.substr(index);\n};\nassign(acid, {\n  chunkString,\n  initialString,\n  insertInRange,\n  restString,\n  rightString,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { restString } from '../string/range';\nconst dotString = '.';\nconst poundString = '#';\nconst classTest = /^.[\\w_-]+$/;\nconst tagTest = /^[A-Za-z]+$/;\nconst regexSpace = /\\s/;\n/**\n  * Wrapper around getElementsByClassName.\n  *\n  * @function getByClass\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n*/\nexport const getByClass = document.getElementsByClassName.bind(document);\n/**\n  * Wrapper around getElementsByTagName.\n  *\n  * @function getByTag\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n*/\nexport const getByTag = document.getElementsByTagName.bind(document);\n/**\n  * Wrapper around getElementsByIdName.\n  *\n  * @function getById\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n*/\nexport const getById = document.getElementById.bind(document);\n/**\n  * Wrapper around querySelector.\n  *\n  * @function querySelector\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n*/\nexport const querySelector = document.querySelector.bind(document);\n/**\n  * Wrapper around querySelectorAll.\n  *\n  * @function querySelectorAll\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n*/\nexport const querySelectorAll = document.querySelectorAll.bind(document);\n/**\n  * Returns relevant DOM node.\n  *\n  * @function selector\n  * @category browser\n  * @ignoreTest\n  * @param {string} select - String to be evaluated.\n  * @type {Function}\n  * @returns {Node} - Returns a DOM node.\n  *\n  * @example\n  * selector('#node');\n  * // => <div id=\"node\"></div>\n*/\nexport const selector = (select) => {\n  const firstLetter = select[0];\n  switch (firstLetter) {\n  case poundString:\n    if (!regexSpace.test(select)) {\n      return getById(restString(select));\n    }\n    break;\n  case dotString:\n    if (classTest.test(select)) {\n      return getByClass(restString(select));\n    }\n    break;\n  default:\n    if (tagTest.test(select)) {\n      return getByTag(select);\n    }\n  }\n  return querySelectorAll(select);\n};\nassign(acid, {\n  getByClass,\n  getById,\n  getByTag,\n  querySelector,\n  querySelectorAll,\n  selector\n});\n","import acid from '../namespace/index';\nimport { append } from './append';\nimport { assign } from '../internal/object';\nimport { eventAdd } from './event';\nimport { nodeAttribute } from './attribute';\nimport { promise } from '../utility/promise';\nimport { querySelector } from './selector';\nconst createTag = document.createElement.bind(document);\nconst nodeAttachLoadingEvents = (node) => {\n  return promise((accept, reject) => {\n    eventAdd(node, 'load', accept, true);\n    eventAdd(node, 'error', reject, true);\n    append(querySelector('head'), node);\n  });\n};\n/**\n  * Asynchronously import a js file and append it to the head node.\n  *\n  * @function importjs\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @async\n  * @returns {Promise} Returns a promise.\n  *\n  * @example\n  * importjs('core.js');\n*/\nexport const importjs = (url) => {\n  const node = nodeAttribute(createTag('script'), {\n    async: '',\n    src: `${url}.js`\n  });\n  return nodeAttachLoadingEvents(node);\n};\nassign(acid, {\n  importjs,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eventAdd } from './event';\nimport { importjs } from './import';\n/**\n  * Runs a function if the document has finished loading. If not, add an eventlistener.\n  *\n  * @function isDocumentReady\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {Function} callable - Function to be run.\n  * @returns {Boolean|Function} - If the document is ready, returns a function. If not, return false.\n  *\n  * @example\n  * isDocumentReady(() => {return 1});\n  * // => 1\n*/\nexport const isDocumentReady = (callable) => {\n  const state = document.readyState;\n  const checkStatus = state === 'interactive' || state === 'completed' || state === 'complete';\n  if (checkStatus) {\n    return (callable) ? callable() : true;\n  }\n  if (callable) {\n    eventAdd(document, 'DOMContentLoaded', callable);\n  }\n  return false;\n};\nassign(acid, {\n  isDocumentReady\n});\nisDocumentReady(() => {\n  importjs('/index');\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst protocol = location.protocol;\nconst protocolSocket = (protocol === 'http:') ? 'ws' : 'wss';\nconst hostname = location.hostname;\n/**\n  * Holds client hardware, browser, and host info.\n  *\n  * @memberof $\n  * @category browser\n  * @ignoreTest\n  * @property info\n  * @type {Object}\n*/\nexport const info = {\n  hardware: {\n    cores: navigator.hardwareConcurrency\n  },\n  host: {\n    name: hostname,\n    protocol,\n    protocolSocket,\n  }\n};\nassign(acid, {\n  info\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eventAdd } from './event';\nimport { info } from './info';\nimport { isDocumentReady } from './ready';\nexport const saveDimensions = () => {\n  assign(info, {\n    bodyHeight: document.body.offsetHeight,\n    bodyWidth: document.body.offsetWidth,\n    windowHeight: window.innerHeight,\n    windowWidth: window.innerWidth,\n  });\n};\n/**\n  * Save current document & window dimensions to the info property.\n  *\n  * @function updateDimensions\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * updateDimensions();\n*/\nexport const updateDimensions = () => {\n  requestAnimationFrame(saveDimensions);\n};\nisDocumentReady(updateDimensions);\neventAdd(window, 'load', updateDimensions, true);\neventAdd(window, 'resize', updateDimensions, true);\nassign(acid, {\n  saveDimensions,\n  updateDimensions\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { isFunction } from '../internal/is';\n/**\n  * Checks if the given method is a function. If it is then it invokes it with the given arguments.\n  *\n  * @function ifInvoke\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked if possible.\n  * @param {...Array} args - Arguments to pass to the method.\n  * @returns {*} Returns the method invoked or undefined.\n  *\n  * @example\n  * ifInvoke((...args) => { return args;}, 1, 2);\n  * // => [1, 2]\n  * ifInvoke(undefined, 1, 2);\n  * // => undefined\n*/\nexport const ifInvoke = (callable, ...args) => {\n  if (isFunction(callable)) {\n    return callable(...args);\n  }\n};\nassign(acid, {\n  ifInvoke\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { clear } from '../array/clear';\nimport { eachArray } from '../array/each';\nimport { ifInvoke } from '../function/ifInvoke';\nlet batchCancelFrame;\nconst batchChanges = [];\nconst batchLoop = () => {\n  eachArray(batchChanges, ifInvoke);\n  clear(batchChanges);\n  batchCancelFrame = false;\n};\n/**\n  * Batch processing using requestAnimationFrame.\n  *\n  * @function batch\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {...Function} items - The functions to add to the current batch.\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * batch(() => {});\n  * // => undefined\n*/\nexport const batch = (...items) => {\n  batchChanges.push(...items);\n  if (!batchCancelFrame) {\n    batchCancelFrame = requestAnimationFrame(batchLoop);\n  }\n};\nassign(acid, {\n  batch\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst jsonNative = JSON;\n/**\n   * Parses JSON string.\n   *\n   * @function jsonParse\n   * @category utility\n   * @type {Function}\n   * @param {string} string - String to be parsed.\n   * @returns {Object} Returns the parsed object.\n   *\n   * @example\n   * jsonParse('{}');\n   * // => {}\n */\nexport const jsonParse = jsonNative.jsonParse;\n/**\n   * Stringify an object into a JSON string.\n   *\n   * @function stringify\n   * @category utility\n   * @type {Function}\n   * @param {Object} object - Object to Stringify.\n   * @returns {string} Returns the object as a valid JSON string.\n   *\n   * @example\n   * stringify({});\n   * // => '{}'\n */\nexport const stringify = jsonNative.stringify;\nassign(acid, {\n  jsonParse,\n  stringify\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { isString } from '../internal/is';\nimport { stringify } from '../utility/json';\nconst generateTheme = (color, bg) => {\n  return `color:${color};background:${bg};`;\n};\nconst themes = {\n  alert: generateTheme('#fff', '#f44336'),\n  important: generateTheme('#fff', '#E91E63'),\n  notify: generateTheme('#fff', '#651FFF'),\n  warning: generateTheme('#000', '#FFEA00'),\n};\n/**\n  * Console.trace wrapper with theme support.\n  *\n  * @function cnsl\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {Object} value - The value to be logged.\n  * @param {string} themeName - The theme to be used.\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * cnsl('Lucy', 'notify');\n  * // 'Lucy'\n*/\nconst cnsl = (value, themeName) => {\n  const data = isString(value) ? value : stringify(value);\n  console.log(`%c${data}`, `${themes[themeName]}font-size:13px;padding:2px 5px;border-radius:2px;`);\n};\n/**\n  * Create color themes for cnsl method.\n  *\n  * @function cnslTheme\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {string} themeName - The name of the theme.\n  * @param {string} color - The text color.\n  * @param {string} background - The background color of the block.\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * cnslTheme('BlackNWhite', '#fff', '#000');\n*/\nconst cnslTheme = (themeName, color, background) => {\n  themes[themeName] = generateTheme(color, background);\n};\nassign(acid, {\n  cnsl,\n  cnslTheme,\n});\n","import acid from '../namespace/index';\nimport { eachArray } from '../array/each';\nimport { isSameObjectGenerator, objectStringGenerate } from '../internal/is';\n/**\n * Checks if value is a plain DOM Node.\n *\n * @function isDom\n * @category browser\n * @ignoreTest\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isDom(document.querySelectorAll('.test'));\n * // => true\n*/\nexport const isDom = (value) => {\n  return value && value.nodeType !== 9;\n};\nacid.isDom = isDom;\neachArray(['HTMLCollection', 'NodeList'], (item) => {\n  acid[`is${item}`] = isSameObjectGenerator(objectStringGenerate(item));\n});\n/**\n * Checks if the value is a HTMLCollection.\n *\n * @function isHTMLCollection\n * @category browser\n * @ignoreTest\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isHTMLCollection(document.getElementsByClassName('test'));\n * // => true\n*/\n/**\n * Checks if the value is a NodeList.\n *\n * @function isNodeList\n * @category browser\n * @ignoreTest\n * @param {*} value - Object to be checked.\n * @returns {boolean} True or false.\n *\n * @example\n * isNodeList(document.querySelectorAll('.test'));\n * // => true\n*/\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Sorts an array in place using a key from newest to oldest.\n  *\n  * @function sortNewest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} key - The property name to sort by based on it's value.\n  * @param {boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.\n  * @returns {Array} The sorted array and or a clone of the array sorted.\n  *\n  * @example\n  * sortNewest([{id: 1}, {id: 0}], 'id');\n  * // => [{id: 1}, {id: 0}]\n*/\nexport const sortNewest = (collection, key, pureMode = true) => {\n  const array = (pureMode) ? collection : [...collection];\n  return array.sort((previous, next) => {\n    if (!next[key]) {\n      return -1;\n    } else if (!previous[key]) {\n      return 1;\n    } else if (previous[key] < next[key]) {\n      return 1;\n    } else if (previous[key] > next[key]) {\n      return -1;\n    }\n    return 0;\n  });\n};\n/**\n  * Sorts an array in place using a key from newest to oldest and returns the latest. Does not mutate the array.\n  *\n  * @function getNewest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} key - The property name to sort by based on it's value.\n  * @returns {Object} The newest object in the collection.\n  *\n  * @example\n  * getNewest([{id: 1}, {id: 0}], 'id');\n  * // => {id: 1}\n*/\nexport const getNewest = (collection, key) => {\n  return sortNewest(collection, key, false)[0];\n};\nassign(acid, {\n  getNewest,\n  sortNewest,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Sorts an array in place using a key from oldest to newest.\n  *\n  * @function sortOldest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} key - The property name to sort by based on it's value.\n  * @param {boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.\n  * @returns {Array} The sorted array and or a clone of the array sorted.\n  *\n  * @example\n  * sortOldest([{id: 1}, {id: 0}], 'id');\n  * // => [{id: 0}, {id: 1}]\n*/\nexport const sortOldest = (collection, key, pureMode = true) => {\n  const array = (pureMode) ? collection : [...collection];\n  return array.sort((previous, next) => {\n    if (!next[key]) {\n      return -1;\n    } else if (!previous[key]) {\n      return 1;\n    } else if (previous[key] < next[key]) {\n      return 1;\n    } else if (previous[key] > next[key]) {\n      return -1;\n    }\n    return 0;\n  });\n};\n/**\n  * Sorts an array in place using a key from oldest to newest and returns the oldest. Does not mutate the array.\n  *\n  * @function getOldest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} key - The property name to sort by based on it's value.\n  * @returns {Object} The newest object in the collection.\n  *\n  * @example\n  * sortOldest([{id: 1}, {id: 0}], 'id');\n  * // => {id: 0}\n*/\nexport const getOldest = (collection, key) => {\n  return sortOldest(collection, key)[0];\n};\nassign(acid, {\n  getOldest,\n  sortOldest,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from '../array/each';\n/**\n  * Creates an object composed of keys generated from the results of running each element of collection thru iteratee.\n  * The order of grouped values is determined by the order they occur in collection.\n  * The corresponding value of each key is an array of elements responsible for generating the key.\n  *\n  * @function groupBy\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Array of objects.\n  * @param {Function} iteratee - The iteratee to transform keys.\n  * @returns {Object} Returns the composed aggregate object.\n  *\n  * @example\n  * groupBy([6.1, 4.2, 6.3], Math.floor);\n  * // => { '4': [4.2], '6': [6.1, 6.3] }\n*/\nexport const groupBy = (array, iteratee) => {\n  const sortedObject = {};\n  eachArray(array, (item) => {\n    const results = iteratee(item);\n    if (!sortedObject[results]) {\n      sortedObject[results] = [];\n    }\n    sortedObject[results].push(item);\n  });\n  return sortedObject;\n};\nassign(acid, {\n  groupBy\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from '../array/each';\n/**\n  * Creates an object composed of keys generated from the results of running each element of collection through iteratee.\n  *\n  * @function countBy\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Array of objects.\n  * @param {Function} iteratee - The iteratee to transform keys.\n  * @returns {Object} Returns the composed aggregate object.\n  *\n  * @example\n  * countBy([{a:1}, {a:3}], (item) => { return 'a';}));\n  * // => {a: 2}\n*/\nexport const countBy = (collection, iteratee) => {\n  const object = {};\n  let result;\n  eachArray(collection, (item) => {\n    result = iteratee(item);\n    if (!object[result]) {\n      object[result] = 0;\n    }\n    object[result]++;\n  });\n  return object;\n};\n/**\n  * Count the amount of times a key is present in a colleciton.\n  *\n  * @function countKey\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Array of objects.\n  * @param {Function} property - The name of the key.\n  * @returns {number} The count.\n  *\n  * @example\n  * countKey([{a:1}, {a:3}], 'a');\n  * // => 2\n*/\nexport const countKey = (array, property) => {\n  let count = 0;\n  eachArray(array, (item) => {\n    if (item[property]) {\n      count++;\n    }\n  });\n  return count;\n};\n/**\n  * Count the amount of times a key is not present in a colleciton.\n  *\n  * @function countWithoutKey\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Array of objects.\n  * @param {string} property - The name of the key.\n  * @returns {number} The count.\n  *\n  * @example\n  * countWithoutKey([{a:1}, {a:3}], 'b');\n  * // => 2\n*/\nexport const countWithoutKey = (array, keyName) => {\n  let count = 0;\n  eachArray(array, (item) => {\n    if (!item[keyName]) {\n      count++;\n    }\n  });\n  return count;\n};\nassign(acid, {\n  countBy,\n  countKey,\n  countWithoutKey\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from '../array/each';\n/**\n  * Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item.\n  * Just like groupBy, but for when you know your keys are unique.\n  *\n  * @function indexBy\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Array of objects.\n  * @param {Function} iteratee - The iteratee to transform keys.\n  * @returns {Object} Returns the composed aggregate object.\n  *\n  * @example\n  * indexBy([{name: 'Lucy', id: 0}, {name: 'Erick', id: 1}], Math.floor);\n  * // => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}\n*/\nexport const indexBy = (array, key) => {\n  const sortedObject = {};\n  eachArray(array, (item) => {\n    sortedObject[item[key]] = item;\n  });\n  return sortedObject;\n};\nassign(acid, {\n  indexBy\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { mapArray } from '../array/each';\n/**\n  * Returns an array of the plucked values from the collection.\n  *\n  * @function pluck\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Array used to determine what values to be plucked.\n  * @param {string} pluckThis - Property name.\n  * @returns {Array} - An array of plucked values.\n  *\n  * @example\n  * pluck([{lucy: 'Ants moving around on the walls.'}, {lucy: 'In the sky with diamonds.'}], ['lucy']);\n  * // => ['Ants moving around on the walls.', 'In the sky with diamonds.']\n*/\nexport const pluck = (collection, pluckThis) => {\n  return mapArray(collection, (item) => {\n    const result = item[pluckThis];\n    return result;\n  });\n};\nassign(acid, {\n  pluck\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { mapArray } from '../array/each';\n/**\n  * Invokes a function on the provided property name in each object in the collection.\n  *\n  * @function invoke\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection from which method will be taken.\n  * @param {string} methodName - Value used to pluck method from object.\n  * @param {*} args - Values to be run through method.\n  * @returns {Array} - Returns the results of the invoked method.\n  *\n  * @example\n  * invoke([{lucy(item, index) { return [item, index];}}, {lucy(item, index) { return [item, index];}}], 'lucy', 'Arity LLC');\n  * // => [['lucy', 'Arity LLC'], ['lucy', 'Arity LLC']]\n*/\nconst invoke = (collection, property, args) => {\n  return mapArray(collection, (item, index) => {\n    return item[property](args, index);\n  });\n};\nassign(acid, {\n  invoke\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { mapAsync } from '../array/mapAsync';\n/**\n  * Asynchronously awaits & invokes a function on the provided property name in each object in the collection.\n  *\n  * @function invokeAsync\n  * @category collection\n  * @type {Function}\n  * @async\n  * @param {Array} collection - Collection from which method will be taken.\n  * @param {string} methodName - Value used to pluck method from object.\n  * @param {*} args - Values to be run through method.\n  * @returns {Array} - Returns the results of the invoked method.\n  *\n  * @example\n  * invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'Arity LLC');\n  * // => [['lucy', 'Arity LLC'], ['lucy', 'Arity LLC']]\n*/\nconst invokeAsync = (collection, property, args) => {\n  return mapAsync(collection, async (item, index) => {\n    return item[property](args, index);\n  });\n};\nassign(acid, {\n  invokeAsync\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Creates a function that invokes callable, with up to n arguments, ignoring any additional arguments.\n  *\n  * @function ary\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to cap arguments for.\n  * @param {number} amount - The arity cap.\n  * @returns {Object} Returns the new capped function.\n  *\n  * @example\n  * ary((...args) => { return args;}, 2)(1, 2, 3);\n  * // => [1, 2]\n*/\nexport const ary = (callable, amount) => {\n  return (...args) => {\n    return callable(...args.splice(0, amount));\n  };\n};\nassign(acid, {\n  ary\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { clear } from '../array/clear';\n/**\n  * Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method length is not sufficient.\n  *\n  * @function curry\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to curry.\n  * @param {number} arity - The arity of method.\n  * @returns {*} Returns the new curried function.\n  *\n  * @example\n  * const curried = curry((a, b, c) => {\n  *   return [a, b, c];\n  * });\n  * curried(1)(2)(3);\n  * // => [1, 2, 3]\n*/\nexport const curry = (callable, arity = callable.length) => {\n  const curries = [];\n  const curried = (...curryArgs) => {\n    curries.push(...curryArgs);\n    if (curries.length === arity) {\n      const result = callable(...curries);\n      clear(curries);\n      return result;\n    }\n    return curried;\n  };\n  return curried;\n};\n/**\n  * Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method.length is not sufficient. The arguments are given in reverse order.\n  *\n  * @function curryRight\n  * @type {Function}\n  * @param {Function} callable - The function to curry.\n  * @param {number} arity - The arity of method.\n  * @returns {*} Returns the new curried function.\n  *\n  * @example\n  * const curried = curryRight((a, b, c) => {\n  *   return [a, b, c];\n  * });\n  * curried(1)(2)(3);\n  * // => [1, 2, 3]\n*/\nexport const curryRight = (callable, arity = callable.length) => {\n  const curries = [];\n  const curried = (...curryArgs) => {\n    curries.unshift(...curryArgs);\n    if (curries.length === arity) {\n      const result = callable(...curries);\n      clear(curries);\n      return result;\n    }\n    return curried;\n  };\n  return curried;\n};\nassign(acid, {\n  curry,\n  curryRight\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { hasValue } from '../internal/is';\n/**\n  * Creates a function that is restricted to execute method once. Repeat calls to the function will return the value of the first call. The method is executed with the this binding of the created function.\n  *\n  * @function once\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be called.\n  * @returns {Function} Returns the new pass-thru function.\n  *\n  * @example\n  * const onceOnly = once(() => { return 1;});\n  * onceOnly();\n  * // => 1\n  * onceOnly();\n  * // => 1\n*/\nexport const once = (callable) => {\n  let value;\n  const onlyOnce = (...args) => {\n    if (hasValue(value)) {\n      value = callable(...args);\n    }\n    return value;\n  };\n  return onlyOnce;\n};\n/**\n  * Creates a function that executes callable, only after being called n times.\n  *\n  * @function after\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be called.\n  * @param {number} amount - The number of calls until method is invoked.\n  * @returns {Function} Returns the new pass-thru function.\n  *\n  * @example\n  * const onlyAfter = after(1, () => { return 1;});\n  * onlyAfter();\n  * // => undefined\n  * onlyAfter();\n  * // => 1\n*/\nconst after = (callable, amount) => {\n  let point = amount;\n  let value;\n  const onlyAfter = (...args) => {\n    if (point !== null) {\n      point--;\n    }\n    if (point <= 0) {\n      value = callable(...args);\n    } else {\n      point = null;\n    }\n    return value;\n  };\n  return onlyAfter;\n};\n/**\n  * Creates a function that executes callable, only before n times.\n  *\n  * @function before\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be called.\n  * @param {number} amount - The number of calls before n.\n  * @returns {Function} Returns the new pass-thru function.\n  *\n  * @example\n  * const onlyBefore = before(3, () => { return 1;});\n  * onlyBefore(1);\n  * // => 1\n  * onlyBefore(2);\n  * // => 2\n  * onlyBefore(3);\n  * // => 2\n*/\nconst before = (callable, amount) => {\n  let point = amount;\n  let value;\n  const onlyBefore = (...args) => {\n    if (point !== null) {\n      point--;\n    }\n    if (point >= 1) {\n      value = callable(...args);\n    } else {\n      point = null;\n    }\n    return value;\n  };\n  return onlyBefore;\n};\nassign(acid, {\n  after,\n  before,\n  once\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * This method returns a new empty object.\n  *\n  * @function stubObject\n  * @category function\n  * @type {Function}\n  * @returns {Object} Returns the new empty object.\n  *\n  * @example\n  * stubObject();\n  * // => {}\n*/\nexport const stubObject = () => {\n  return {};\n};\n/**\n  * This method returns a new empty array.\n  *\n  * @function stubArray\n  * @category function\n  * @type {Function}\n  * @returns {Array} Returns the new empty array.\n  *\n  * @example\n  * stubArray();\n  * // => []\n*/\nexport const stubArray = () => {\n  return [];\n};\n/**\n  * This method returns a new empty string.\n  *\n  * @function stubString\n  * @category function\n  * @type {Function}\n  * @returns {string} Returns the new empty string.\n  *\n  * @example\n  * stubString();\n  * // => ''\n*/\nexport const stubString = () => {\n  return '';\n};\n/**\n  * This method returns false.\n  *\n  * @function stubFalse\n  * @category function\n  * @type {Function}\n  * @returns {boolean} Returns false.\n  *\n  * @example\n  * stubFalse();\n  * // => false\n*/\nexport const stubFalse = () => {\n  return false;\n};\n/**\n  * This method returns true.\n  *\n  * @function stubTrue\n  * @category function\n  * @type {Function}\n  * @returns {boolean} Returns true.\n  *\n  * @example\n  * stubTrue();\n  * // => true\n*/\nexport const stubTrue = () => {\n  return true;\n};\n/**\n  * This method returns undefined.\n  *\n  * @function noop\n  * @category function\n  * @type {Function}\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * noop();\n  * // => undefined\n*/\nexport const noop = () => {\n  return undefined;\n};\nassign(acid, {\n  noop,\n  stubArray,\n  stubFalse,\n  stubObject,\n  stubString,\n  stubTrue,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { compactMapArray, eachArray, filterArray, mapArray, whileArray } from '../array/each';\nimport { compactMapObject, eachObject, filterObject, mapObject, whileObject } from '../object/each';\nimport { hasValue, isArray, isFunction, isPlainObject } from '../internal/is';\nconst forEachWrap = (object, callback) => {\n  return object.forEach(callback);\n};\nconst generateCheckLoops = (arrayLoop, objectLoop) => {\n  return (callingObject, iteratee, results) => {\n    let returned;\n    if (!hasValue(callingObject)) {\n      return;\n    } else if (isArray(callingObject)) {\n      returned = arrayLoop;\n    } else if (isPlainObject(callingObject) || isFunction(callingObject)) {\n      returned = objectLoop;\n    } else if (callingObject.forEach) {\n      returned = forEachWrap;\n    } else {\n      returned = objectLoop;\n    }\n    return returned(callingObject, iteratee, results);\n  };\n};\n/**\n  * Iterates through the given object while the iteratee returns true.\n  *\n  * @function eachWhile\n  * @category utility\n  * @type {Function}\n  * @param {Object|Array|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n  * @returns {boolean} Returns the true if all values returned are true or false if one value returns false.\n  *\n  * @example\n  * eachWhile({a: false, b: true, c: true}, (item) => {\n  *   return item;\n  *  });\n  * // => false\n*/\nexport const eachWhile = generateCheckLoops(whileArray, whileObject);\n/**\n  * Iterates through the given object.\n  *\n  * @function each\n  * @category utility\n  * @type {Function}\n  * @param {Array|Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n  * @returns {Array|Object|Function} The originally given object.\n  *\n  * @example\n  * each([1, 2, 3], (item) => {\n  *   console.log(item);\n  * });\n  * // => [1, 2, 3]\n  * each({a: 1, b: 2, c: 3}, (item) => {\n  *   console.log(item);\n  * });\n  * // => {a: 1, b: 2, c: 3}\n*/\nexport const each = generateCheckLoops(eachArray, eachObject);\n/**\n  * Iterates through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.\n  *\n  * @function filter\n  * @category utility\n  * @type {Function}\n  * @param {Array|Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Array|Object|Function} - A new object of the same calling object's type.\n  *\n  * @example\n  * filter([false, true, true], (item) => {\n  *   return item;\n  * });\n  * // => [true, true]\n  * filter({a: false, b: true, c: true}, (item) => {\n  *   return true;\n  * });\n  * // => {b: true, c: true}\n*/\nexport const filter = generateCheckLoops(filterArray, filterObject);\n/**\n  * Iterates through the calling object and creates a new object based on the calling object's type with the results of the iteratee on every element in the calling object.\n  *\n  * @function map\n  * @category utility\n  * @type {Function}\n  * @param {Array|Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Array|Object|Function} A new object of the same calling object's type.\n  *\n  * @example\n  * map([1, 2, 3], (item) => {\n  *   return item * 2;\n  * });\n  * // => [2, 4, 6]\n  * map({a: 1, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {a: 2, b: 4, c: 6}\n*/\nexport const map = generateCheckLoops(mapArray, mapObject);\n/**\n  * Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n  *\n  * @function compactMap\n  * @category utility\n  * @type {Function}\n  * @param {Array|Object|Function} callingObject - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Array|Object|Function} A new object of the same calling object's type.\n  *\n  * @example\n  * compactMap([0, 2, 3], (item) => {\n  *   return item * 2;\n  * });\n  * // => [4, 6]\n  * compactMap({a: 0, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {b: 4, c: 6}\n*/\nexport const compactMap = generateCheckLoops(compactMapArray, compactMapObject);\nassign(acid, {\n  compactMap,\n  each,\n  filter,\n  map\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { isFunction } from '../internal/is';\nimport { map } from '../utility/each';\n/**\n  * Loops through an object or an array and binds the given object to all functions encountered.\n  *\n  * @function bindAll\n  * @category function\n  * @type {Function}\n  * @param {Object|Function|Array} collection - The functions to bind.\n  * @param {*} bindThis - Object to be bound to functions.\n  * @returns {Object|Function|Array} Returns the method invoked or undefined.\n  *\n  * @example\n  * const collection = bindAll([() => { return this;}], 'Lucy');\n  * collection[0]();\n  * // => 'Lucy'\n  *\n  * const collection = bindAll({a() { return this;}}, 'Lucy');\n  * collection.a();\n  * // => 'Lucy'\n*/\nexport const bindAll = (collection, bindThis) => {\n  return map(collection, (item) => {\n    return isFunction(item) ? item.bind(bindThis) : item;\n  });\n};\nassign(acid, {\n  bindAll\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Creates a function that negates the result of the predicate callable.\n  *\n  * @function negate\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @returns {*} Returns the given methods result.\n  *\n  * @example\n  * negate(() => { return false;})();\n  * // => true\n*/\nexport const negate = (callable) => {\n  return (...args) => {\n    return !callable(...args);\n  };\n};\nassign(acid, {\n  negate\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachWhile } from '../utility/each';\n/**\n  * Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate returns falsey. The predicate is invoked with three arguments: (value, index|key, collection).\n  *\n  * @function every\n  * @category function\n  * @type {Function}\n  * @param {Array|Object} collection - The collection to iterate over.\n  * @param {Function} predicate - The function invoked per iteration.\n  * @returns {boolean} Returns true if all elements pass the predicate check, else false.\n  *\n  * @example\n  * every([[], true, 1, null, 'string'], Boolean);\n  * // => false\n*/\nexport const every = eachWhile;\nassign(acid, {\n  every,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachWhile, map } from '../utility/each';\n/**\n  * Creates a function that invokes iteratees with the arguments it receives and returns their results.\n  *\n  * @function over\n  * @category function\n  * @type {Function}\n  * @param {Array|Object} iteratees - The iteratees to invoke.\n  * @returns {Function} Returns the new function.\n  *\n  * @example\n  * over([Math.max, Math.min])(1, 2, 3, 4);\n  * // => [4, 1]\n*/\nexport const over = (iteratees) => {\n  return (...args) => {\n    return map(iteratees, (item) => {\n      return item(...args);\n    });\n  };\n};\n/**\n  * Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.\n  *\n  * @function overEvery\n  * @category function\n  * @type {Function}\n  * @param {Array|Object} predicates -  The predicates to check.\n  * @returns {Function} Returns the new function.\n  *\n  * @example\n  * const overEveryThing = overEvery([Boolean, isFinite]);\n  * overEveryThing('1');\n  * // => true\n  * overEveryThing(null);\n  * // => false\n*/\nexport const overEvery = (predicates) => {\n  return (...args) => {\n    return eachWhile(predicates, (item) => {\n      return item(...args);\n    });\n  };\n};\nassign(acid, {\n  over,\n  overEvery\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { times } from '../array/times';\n/**\n  * Timer wrapper.\n  *\n  * @function timer\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Object} Returns setTimeout ID.\n  *\n  * @example\n  * timer(() => {}, 100);\n  * // => 0\n*/\nexport const timer = (callable, time) => {\n  return setTimeout(callable, time);\n};\n/**\n  * Interval wrapper.\n  *\n  * @function interval\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Object} Returns setInterval ID.\n  *\n  * @example\n  * interval(() => {}, 100);\n  * // => 0\n*/\nexport const interval = (callable, time) => {\n  return setInterval(callable, time);\n};\nconst generateClear = (callable, clearMethod) => {\n  return () => {\n    times(0, callable(() => {}, 0), (index) => {\n      clearMethod(index);\n    });\n  };\n};\n/**\n  * Clear all active timers.\n  *\n  * @function clearTimers\n  * @category function\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * clearTimers();\n  * // => undefined\n*/\nexport const clearTimers = generateClear(timer, clearTimeout);\n/**\n  * Clear all active intervals.\n  *\n  * @function clearIntervals\n  * @category function\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * clearIntervals();\n  * // => undefined\n*/\nexport const clearIntervals = generateClear(interval, clearInterval);\n/**\n  * Creates a debounced function that delays invoking callable until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounce function has a clear method to cancel the timer.\n  *\n  * @function debounce\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Function} The debounced function.\n  *\n  * @example\n  * const debounced = debounce(() => { console.log('debounced'); }, 0);\n  * // => debounced();\n*/\nexport const debounce = (callable, time) => {\n  let timeout = false;\n  const debounced = (...args) => {\n    if (timeout !== false) {\n      clearTimeout(timeout);\n    }\n    timeout = timer(() => {\n      callable(...args);\n      timeout = false;\n    }, time);\n  };\n  debounced.clear = () => {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = false;\n    }\n  };\n  return debounced;\n};\n/**\n  * Creates a throttled function that only invokes callable at most once per every wait milliseconds. The throttle function has a clear method to cancel the timer.\n  *\n  * @function throttle\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Function} The throttled function.\n  *\n  * @example\n  * const throttled = throttle(() => { console.log('debounced'); }, 0);\n  * // => throttled();\n*/\nexport const throttle = (callable, time) => {\n  let timeout = false;\n  let shouldThrottle;\n  const throttled = (...args) => {\n    if (timeout) {\n      shouldThrottle = true;\n      return;\n    }\n    callable(...args);\n    timeout = timer(() => {\n      if (shouldThrottle) {\n        callable(...args);\n      }\n      timeout = false;\n    }, time);\n  };\n  throttled.clear = () => {\n    clearTimeout(timeout);\n    timeout = false;\n  };\n  return throttled;\n};\nassign(acid, {\n  debounce,\n  interval,\n  throttle,\n  timer,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { each } from '../utility/each';\nconst add = (link, methods) => {\n  each(methods, (item, key) => {\n    link.methods[key] = (...args) => {\n      item(link.value, ...args);\n      return link.methods;\n    };\n  });\n  return link;\n};\n/**\n  * Creates a chainable set of functions.\n  *\n  * @function chain\n  * @category function\n  * @type {Function}\n  * @param {Array|Object} methods - The object to take methods from.\n  * @returns {*} Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.\n  *\n  * @example\n  * const chained = chain({a(item) { return item;}});\n  * chained('Acid').a();\n  * // => 'Acid'\n*/\nexport const chain = (methods) => {\n  const link = (value) => {\n    link.value = value;\n    return link.methods;\n  };\n  assign(link, {\n    add(addToChain) {\n      return add(link, addToChain);\n    },\n    done() {\n      const value = link.value;\n      link.value = null;\n      return value;\n    },\n    methods: {},\n  });\n  link.link(methods);\n  return link;\n};\nassign(acid, {\n  chain\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { each } from '../utility/each';\nimport { eachAsync } from '../array/eachAsync';\n/**\n  * Invoke an array of functions.\n  *\n  * @function inSync\n  * @category function\n  * @type {Function}\n  * @param {Array|Object|Function} collection - The functions to be invoked.\n  * @param {*} arg - The object passed as an argument to each method.\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * inSync([() => {console.log(1);}, () => {console.log(2);}]);\n  * // 1\n  * // 2\n  * // => undefined\n*/\nexport const inSync = (collection, arg) => {\n  return each(collection, (item) => {\n    item(arg);\n  });\n};\n/**\n  * Invoke an array of functions asynchronously. Each function is awaited to ensure execution order.\n  *\n  * @function inAsync\n  * @category function\n  * @type {Function}\n  * @async\n  * @param {Array|Object|Function} collection - The functions to be invoked.\n  * @param {*} arg - The object passed as an argument to each method.\n  * @returns {undefined} Returns undefined.\n  *\n  * @example\n  * inAsync([async () => {console.log(1);}, async () => {console.log(2);}]);\n  * // 1\n  * // 2\n  * // => undefined\n*/\nexport const inAsync = async (collection, arg) => {\n  return eachAsync(collection, async (item) => {\n    await item(arg);\n  });\n};\nassign(acid, {\n  inAsync,\n  inSync,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.\n  *\n  * @function nthArg\n  * @category function\n  * @type {Function}\n  * @param {number} [index = 0] - The index of the argument to return.\n  * @returns {Function} Returns the new pass-thru function.\n  *\n  * @example\n  * nthArg(1)('a', 'b');\n  * // => 'b'\n*/\nexport const nthArg = (index = 0) => {\n  return (...args) => {\n    return args[index];\n  };\n};\nassign(acid, {\n  nthArg\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Creates a function that invokes method with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.\n  *\n  * @function reArg\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {Array} indexes - The arranged argument indexes.\n  * @returns {Function} Returns the new function.\n  *\n  * @example\n  * const reArged = reArg((a, b, c) => {\n  *   return [a, b, c];\n  * }, [1,2,0]);\n  * reArged(1,2,3);\n  * // => [2, 3, 1]\n*/\nexport const reArg = (callable, indexes) => {\n  return (...args) => {\n    return callable(...indexes.map((item) => {\n      return args[item];\n    }));\n  };\n};\nassign(acid, {\n  reArg\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Creates a function that provides value to wrapper as its first argument. The wrapper function is given two arguments the value and the provided argument from the newly created function.\n  *\n  * @function wrap\n  * @category function\n  * @type {Function}\n  * @param {*} value - The value to wrap.\n  * @param {Function} wrapper - The wrapper function.\n  * @returns {Function} The new function.\n  *\n  * @example\n  * const wrapped = wrap('Lucy', (firstName, lastName) => {console.log(`My name is ${firstName} ${lastName}.`);});\n  * wrapped('Diamonds');\n  * // => 'My name is Lucy Diamonds.'\n*/\nexport const wrap = (value, wrapper) => {\n  return (arg) => {\n    return wrapper(value, arg);\n  };\n};\nassign(acid, {\n  wrap,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Strictly checks if a number is zero.\n  *\n  * @function isZero\n  * @category number\n  * @type {Function}\n  * @param {number} item - Number to be checked.\n  * @returns {boolean} True or False.\n  *\n  * @example\n  * isZero(0);\n  * // => true\n  *\n  * isZero(1);\n  * // => False\n*/\nexport const isZero = (item) => {\n  return item === 0;\n};\n/**\n  * Strictly checks if a number equal to another number.\n  *\n  * @function isNumberEqual\n  * @category number\n  * @type {Function}\n  * @param {number} item - Number to be checked against num.\n  * @param {number} num - Number to be checked against item.\n  * @returns {boolean} True or False.\n  *\n  * @example\n  * isNumberEqual(0, 0);\n  * // => true\n  *\n  * isNumberEqual(0, 1);\n  * // => False\n*/\nexport const isNumberEqual = (item, num) => {\n  return item === num;\n};\n/**\n  * Checks if a number is within a range.\n  *\n  * @function isNumberInRange\n  * @category number\n  * @type {Function}\n  * @param {number} num - Number to be checked.\n  * @param {number} [start = 0] - Beginning of range.\n  * @param {number} [end] - End of range.\n  * @returns {boolean} True or False.\n  *\n  * @example\n  * isNumberInRange(1, 0, 2);\n  * // => True\n  *\n  * isNumberInRange(1, -1, 0);\n  * // => False\n*/\nexport const isNumberInRange = (num, start = 0, end = start) => {\n  return num > start && num < end;\n};\nassign(acid, {\n  isNumberEqual,\n  isNumberInRange,\n  isZero\n});\n","import acid from '../namespace/index';\nimport { whileArray } from '../array/each';\nimport { assign, keys } from '../internal/object';\n/**\n  * Checks to see if an object has all of the given property names.\n  *\n  * @function hasKeys\n  * @category object\n  * @type {Function}\n  * @param {Object} object - Object from which keys are extracted.\n  * @param {Array} properties - Array of object keys.\n  * @returns {boolean} - Returns true or false.\n  *\n  * @example\n  * hasKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Thor']);\n  * // => true\n  *\n  * @example\n  * hasKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Tom']);\n  * // => false\n*/\nexport const hasKeys = (object, properties) => {\n  const objectKeys = keys(object);\n  return whileArray(properties, (item) => {\n    return objectKeys.include(item);\n  });\n};\n/**\n  * Checks to see if an object has any of the given property names.\n  *\n  * @function hasAnyKeys\n  * @type {Function}\n  * @param {Object} object - Object from which keys are extracted.\n  * @param {Array} properties - Array of object keys.\n  * @returns {boolean} - Returns true or false.\n  *\n  * @example\n  * hasAnyKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Tom']);\n  * // => true\n  *\n  * hasAnyKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Other','Tom']);\n  * // => false\n*/\nexport const hasAnyKeys = (object, properties) => {\n  const objectKeys = keys(object);\n  return properties.find((item) => {\n    return objectKeys.include(item);\n  });\n};\nassign(acid, {\n  hasAnyKeys,\n  hasKeys,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray } from '../array/each';\n/**\n  * Returns a clone of the source object with the plucked properties.\n  *\n  * @function pick\n  * @type {Function}\n  * @category object\n  * @param {Object} source - Object to be cloned.\n  * @param {Array} array - Array used to determine what values to be plucked.\n  * @param {Object} [newObject = {}] - Object to be populated with plucked values.\n  * @returns {Object} - A new object with plucked properties.\n  *\n  * @example\n  * pick({a:1, b:2, c:3}, ['a','b']);\n  * // => {a:1, b:2}\n*/\nconst pick = (source, array, newObject = {}) => {\n  eachArray(array, (item) => {\n    newObject[item] = source[item];\n  });\n  return newObject;\n};\nassign(acid, {\n  pick\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachObject } from '../object/each';\n/**\n  * Extracts all key values from an object.\n  *\n  * @function compactKeys\n  * @category object\n  * @type {Function}\n  * @param {Object} object - Object from which keys are extracted.\n  * @returns {Array} - Returns an array of key values.\n  *\n  * @example\n  * compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\n  * // => ['Lucy', 'John', 'other']\n  *\n*/\nexport const compactKeys = (object) => {\n  const keys = [];\n  eachObject(object, (item, key) => {\n    if (item) {\n      keys.push(key);\n    }\n  });\n  return keys;\n};\nassign(acid, {\n  compactKeys\n});\n","import acid from '../namespace/index';\nimport { whileArray } from '../array/each';\nimport { isMatchArray } from '../array/isMatch';\nimport { assign, keys } from '../internal/object';\n/**\n   * Performs a shallow strict comparison between two objects.\n   *\n   * @function isMatchObject\n   * @type {Function}\n   * @category object\n   * @param {Object} source - Source object.\n   * @param {Object} compareObject - Object to compare to source.\n   * @returns {boolean} Returns the true or false.\n   *\n   * @example\n   * isMatchObject({a: [1,2,3]}, {a: [1,2,3]});\n   * // => true\n */\nexport const isMatchObject = (source, compareObject) => {\n  const sourceProperties = keys(source);\n  if (isMatchArray(sourceProperties, keys(compareObject))) {\n    return whileArray(sourceProperties, (key) => {\n      return source[key] === compareObject[key];\n    });\n  }\n  return false;\n};\nassign(acid, {\n  isMatchObject,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachObject } from './each';\n/**\n  * Creates an inverted version of a given object by switching it's keys and values.\n  *\n  * @function invert\n  * @type {Function}\n  * @category object\n  * @param {Object} thisObject - Object to be inverted.\n  * @param {Array} [invertedObject = {}] - Empty object to be populated with inverted values from thisObject.\n  * @returns {Object} - Returns object with keys and values switched.\n  *\n  * @example\n  * invert({a:1});\n  * // => {1:a}\n*/\nexport const invert = (thisObject, invertedObject = {}) => {\n  eachObject(thisObject, (item, key) => {\n    invertedObject[item] = key;\n  });\n  return invertedObject;\n};\nassign(acid, {\n  invert,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { filterObject } from './each';\n/**\n  * Returns a clone of the given object without the given properties.\n  *\n  * @function omit\n  * @type {Function}\n  * @param {Object} originalObject - Object from which keys are extracted.\n  * @param {Array} array - Array of object keys.\n  * @returns {Object} - A new object with the removed.\n  *\n  * @example\n  * omit({a:1, b:2, ['a']});\n  * // => {b:2}\n  *\n*/\nexport const omit = (originalObject, array) => {\n  return filterObject(originalObject, (item, key) => {\n    return !array.includes(key);\n  });\n};\nassign(acid, {\n  omit\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst normalizeCase = /[-_]/g;\nconst spaceFirstLetter = / (.)/g;\n/**\n  * Converts a string and converts it entirely into uppercase.\n  *\n  * @function upperCase\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be converted into upper case.\n  * @returns {string} - Converted string in upper case.\n  *\n  * @example\n  * upperCase('upper case');\n  * // => 'UPPER CASE'\n*/\nexport const upperCase = (string) => {\n  return string.replace(normalizeCase, ' ')\n    .trim()\n    .toUpperCase();\n};\n/**\n  * Converts a string into Camel case format.\n  *\n  * @function camelCase\n  * @type {Function}\n  * @param {string} string - String to be converted into Camel case.\n  * @returns {string} - Converted string in Camel case.\n  *\n  * @example\n  * camelCase('camel case');\n  * // => 'camelCase'\n*/\nexport const camelCase = (string) => {\n  return string.toLowerCase()\n    .replace(spaceFirstLetter, (match) => {\n      return match.toUpperCase();\n    });\n};\n/**\n  * Converts a string into Kebab case format.\n  *\n  * @function kebabCase\n  * @type {Function}\n  * @param {string} string - String to be converted into Kebab case.\n  * @returns {string} - Converted string in Kebab case.\n  *\n  * @example\n  * kebabCase('kebab case');\n  * // => 'kebab-case'\n*/\nexport const kebabCase = (string) => {\n  return string.replace(normalizeCase, ' ')\n    .trim()\n    .toLowerCase()\n    .replace(spaceFirstLetter, '-$1');\n};\n/**\n  * Converts a string into snake case format.\n  *\n  * @function snakeCase\n  * @type {Function}\n  * @param {string} string - String to be converted into snake case.\n  * @returns {string} - Converted string in Snake case.\n  *\n  * @example\n  * snakeCase('snake case');\n  * // => 'snake_case'\n*/\nexport const snakeCase = (string) => {\n  return string.replace(normalizeCase, ' ')\n    .trim()\n    .toLowerCase()\n    .replace(spaceFirstLetter, '_$1');\n};\nassign(acid, {\n  camelCase,\n  kebabCase,\n  snakeCase,\n  upperCase,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\n/**\n  * Replaces all occurrences of strings in an array with a value.\n  *\n  * @function replaceList\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be replaced.\n  * @param {Array} array - Strings to replace.\n  * @param {string} value - The match replacement.\n  * @returns {string} - The string with the replacement.\n  *\n  * @example\n  * replaceList('Her name was @user.', ['@user'], 'Lucy');\n  * // => 'Her name was Lucy.'\n*/\nexport const replaceList = (string, array, value) => {\n  return string.replace(new RegExp(`\\\\b${array.join('|')}\\\\b`, 'gi'), value);\n};\nassign(acid, {\n  replaceList\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst rawURLDecodeRegex = /%(?![\\da-f]{2})/gi;\nconst andRegex = /&/g;\nconst lessThanRegex = /</g;\nconst moreThanRegex = />/g;\nconst doubleQuoteRegex = /\"/g;\n/**\n  * Raw URL decoder.\n  *\n  * @function rawURLDecode\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be replaced.\n  * @returns {string} - Converted string into the decoded URI Component .\n  *\n  * @example\n  * rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.');\n  * // => 'Lucy saw diamonds in the sky.'\n*/\nexport const rawURLDecode = (string) => {\n  return decodeURIComponent(string.replace(rawURLDecodeRegex, () => {\n    return '%25';\n  }));\n};\n/**\n  * Replaced sensitive characters with their matching html entity.\n  *\n  * @function htmlEntities\n  * @type {Function}\n  * @param {string} string - String to be replaced.\n  * @returns {string} Replaced string.\n  *\n  * @example\n  * htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`);\n  * // => '&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;'\n*/\nexport const htmlEntities = (string) => {\n  return string.replace(andRegex, '&amp;')\n    .replace(lessThanRegex, '&lt;')\n    .replace(moreThanRegex, '&gt;')\n    .replace(doubleQuoteRegex, '&quot;');\n};\n/**\n  * Executes rawURLDecode followd by htmlEntities methods on a string.\n  *\n  * @function sanitize\n  * @type {Function}\n  * @param {string} string - String to be replaced.\n  * @returns {string} Replaced string.\n  *\n  * @example\n  * sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`);\n  * // => '&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;'\n*/\nexport const sanitize = (string) => {\n  return htmlEntities(rawURLDecode(string));\n};\nassign(acid, {\n  htmlEntities,\n  rawURLDecode,\n  sanitize\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst tokenizeRegEx = /\\S+/g;\nconst wordsRegEx = /\\w+/g;\n/**\n  * Break string by non-white space characters matches.\n  *\n  * @function tokenize\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be broken up.\n  * @returns {Array} - Array of words without white space characters.\n  *\n  * @example\n  * tokenize('I am Lucy!');\n  * // => [\"I\", \"am\", \"Lucy!\"]\n*/\nexport const tokenize = (string) => {\n  return string.match(tokenizeRegEx) || [];\n};\n/**\n  * Break string into word matches.\n  *\n  * @function words\n  * @type {Function}\n  * @param {string} string - String to be broken up.\n  * @returns {Array} - Array of words with word characters only.\n  *\n  * @example\n  * words('I am Lucy!');\n  * // => [\"I\", \"am\", \"Lucy\"]\n*/\nexport const words = (string) => {\n  return string.match(wordsRegEx) || [];\n};\nassign(acid, {\n  tokenize,\n  words\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst truncateDown = (string, maxLength, stringLength) => {\n  const breakAll = string.split('');\n  const breakAllLength = breakAll.length;\n  let item;\n  let index = stringLength - maxLength;\n  for (; index < breakAllLength && index >= 0; index--) {\n    item = breakAll[index];\n    if (item === ' ') {\n      break;\n    }\n  }\n  return string.slice(0, index).trim();\n};\nconst truncateUp = (string, maxLength, stringLength) => {\n  const breakAll = string.split('');\n  const breakAllLength = breakAll.length;\n  let item;\n  let index = maxLength;\n  for (; index < breakAllLength && index > 0; index++) {\n    item = breakAll[index];\n    if (item === ' ') {\n      break;\n    }\n  }\n  return string.substr(index, stringLength).trim();\n};\n/**\n  * Truncates the string, accounting for word placement and character count.\n  *\n  * @function truncate\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be truncated.\n  * @param {number} maxLength - The desired max length of the string.\n  * @returns {string} - The mutated string.\n  *\n  * @example\n  * truncate('Where is Lucy?', 2);\n  * // => 'Where'\n*/\nexport const truncate = (string, maxLength) => {\n  const stringLength = string.length;\n  return (stringLength > maxLength) ? truncateDown(string, maxLength, stringLength) : string;\n};\n/**\n  * Truncates the string, accounting for word placement and character count from the right.\n  *\n  * @function truncateRight\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be truncated.\n  * @param {number} maxLength - The desired max length of the string.\n  * @returns {string} - The mutated string.\n  *\n  * @example\n  * truncateRight('Where is Lucy?', 6);\n  * // => 'Lucy?'\n*/\nexport const truncateRight = (string, maxLength) => {\n  const stringLength = string.length;\n  return (stringLength > maxLength) ? truncateUp(string, maxLength, stringLength) : string;\n};\nassign(acid, {\n  truncate,\n  truncateRight,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { restString } from './range';\nconst spaceFirstLetter = / (.)/g;\n/**\n  * Returns the first letter capitalized.\n  *\n  * @function upperFirstLetter\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to extract first letter from.\n  * @returns {string} - An upper case letter.\n  *\n  * @example\n  * upperFirstLetter('upper');\n  * // => 'U'\n*/\nexport const upperFirstLetter = (string) => {\n  return string[0].toUpperCase();\n};\n/**\n  * Capitalizes the first letter.\n  *\n  * @function upperFirst\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be mutated.\n  * @returns {string} - String with first letter capitalized.\n  *\n  * @example\n  * upperFirstLetter('upper');\n  * // => 'Upper'\n*/\nexport const upperFirst = (string) => {\n  return upperFirstLetter(string) + restString(string);\n};\n/**\n  * Capitalize all first letters.\n  *\n  * @function upperFirstAll\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be mutated.\n  * @returns {string} - String with all first letters capitalized.\n  *\n  * @example\n  * upperFirstAll('Lucy is next up.');\n  * // => 'Lucy Is Next Up.'\n*/\nexport const upperFirstAll = (string) => {\n  return string.replace(spaceFirstLetter, (match) => {\n    return match.toUpperCase();\n  });\n};\n/**\n  * Capitalize first letter and lower case the rest.\n  *\n  * @function upperFirstOnly\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be mutated.\n  * @returns {string} - String with first letter capitalized.\n  *\n  * @example\n  * upperFirstOnly('LYSERGIC ACID DIETHYLAMIDE');\n  * // => 'Lysergic acid diethylamide'\n*/\nexport const upperFirstOnly = (string) => {\n  return upperFirstLetter(string) + restString(string).toLowerCase();\n};\n/**\n  * Capitalize all first letters and lower case the rest.\n  *\n  * @function upperFirstOnlyAll\n  * @type {Function}\n  * @category string\n  * @param {string} string - String to be mutated.\n  * @returns {string} - String with all first letters capitalized.\n  *\n  * @example\n  * upperFirstOnlyAll('LYSERGIC ACID DIETHYLAMIDE');\n  * // => 'Lysergic Acid Diethylamide'\n*/\nexport const upperFirstOnlyAll = (string) => {\n  return string.toLowerCase()\n    .replace(spaceFirstLetter, (match) => {\n      return match.toUpperCase();\n    });\n};\nassign(acid, {\n  upperFirst,\n  upperFirstAll,\n  upperFirstOnly,\n  upperFirstOnlyAll,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { each } from './each';\nimport { isArray, isPlainObject } from '../internal/is';\n/**\n  * Creates new object with deeply assigned values from another object/array.\n  *\n  * @function assignDeep\n  * @category utility\n  * @type {Function}\n  * @param {Object} object - Object to be assigned new properties.\n  * @param {Object} otherObject - Object from which properties are extracted.\n  * @param {boolean} [mergeArrays = true] - Array from which items are assigned to the new object.\n  * @returns {Object} - Returns object with the newly assigned properties.\n  *\n  * @example\n  * assignDeep({a:1}, {b:2})\n  * // => {a:1, b:2}\n*/\nexport const assignDeep = (object, otherObject, mergeArrays = true) => {\n  each(otherObject, (item, key) => {\n    if (isPlainObject(item) && isPlainObject(object[key])) {\n      assignDeep(object[key], item, mergeArrays);\n    } else if (mergeArrays && isArray(item) && isArray(object[key])) {\n      object[key].push(...item);\n    } else {\n      object[key] = item;\n    }\n  });\n  return object;\n};\nassign(acid, {\n  assignDeep\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst functionPrototype = Function.prototype;\n/**\n  * Caches a prototype method.\n  *\n  * @function cacheNativeMethod\n  * @category utility\n  * @type {Function}\n  * @param {Function} method - Prototype method.\n  * @returns {Function} - Cached method.\n  *\n  * @example\n  * cacheNativeMethod(Array.prototype.push);\n  * // => function call() { [native code] }\n*/\nexport function cacheNativeMethod(method) {\n  return functionPrototype.call.bind(method);\n}\nassign(acid, {\n  cacheNativeMethod\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { hasValue } from '../internal/is';\n/**\n   * Checks if a property on an object has a value. If not, it will assign a value.\n   *\n   * @function ifNotEqual\n   * @category utility\n   * @type {Function}\n   * @param {Object} rootObject - The object to check.\n   * @param {string} property - The property name which is to be checked.\n   * @param {*} equalThis - The reassignment value for the property being checked.\n   * @returns {Object} - Returns the provided rootObject.\n   *\n   * @example\n   * ifNotEqual({}, 'a', 1);\n   * // => {a:1}\n */\nexport const ifNotEqual = (rootObject, property, equalThis) => {\n  if (property && !hasValue(rootObject[property])) {\n    rootObject[property] = equalThis;\n  }\n  return rootObject;\n};\nassign(acid, {\n  ifNotEqual,\n});\n","import acid from '../namespace/index';\nimport { whileArray } from '../array/each';\nimport { isMatchArray } from '../array/isMatch';\nimport { assign, keys } from '../internal/object';\nimport { isArray, isPlainObject } from '../internal/is';\n/**\n   * Performs a deep comparison between two objects.\n   *\n   * @function isEqual\n   * @type {Function}\n   * @category utility\n   * @param {Object} source - Source object.\n   * @param {Object} compareObject - Object to compare to source.\n   * @returns {boolean} Returns the true or false.\n   *\n   * @example\n   * isEqual({a: [1,2,3]}, {a: [1,2,3]});\n   * // => true\n */\nexport const isEqual = (object, compareObject) => {\n  if (object === compareObject) {\n    return true;\n  } else if (object.toString() === compareObject.toString()) {\n    if (isPlainObject(object)) {\n      const sourceProperties = keys(object);\n      if (isMatchArray(sourceProperties, keys(compareObject))) {\n        return whileArray(sourceProperties, (key) => {\n          return isEqual(object[key], compareObject[key]);\n        });\n      }\n    } else if (isArray(object)) {\n      if (object.length === compareObject.length) {\n        return whileArray(object, (item, index) => {\n          return isEqual(item, compareObject[index]);\n        });\n      }\n    }\n  }\n  return false;\n};\nassign(acid, {\n  isEqual,\n});\n","import acid from '../namespace/index';\nimport { isEqual } from './isEqual';\nimport { whileArray } from '../array/each';\nimport { assign, keys } from '../internal/object';\n/**\n  * Using a deep comparison it checks if properties of two objects using an array are equal.\n  *\n  * @function propertyMatch\n  * @type {Function}\n  * @category utility\n  * @property {Object} - takes an object.\n  * @property {Object} - takes an object.\n  * @property {Array} - takes in an array of properties.\n  *\n  * @example\n  * propertyMatch({\n  *   a: 1,\n  *   b: 2\n  * }, {\n  *   a: 1,\n  *   b: 2\n  * }, ['a', 'b']);\n  * // => true\n*/\nexport const propertyMatch = (object, compareObject, properties = keys(object)) => {\n  return whileArray(properties, (property) => {\n    return isEqual(object[property], compareObject[property]);\n  });\n};\nassign(acid, {\n  propertyMatch,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nconst regexToPath = /\\.|\\[/;\nconst regexCloseBracket = /]/g;\nconst emptyString = '';\n/**\n  * Breaks up string into object chain list.\n  *\n  * @function toPath\n  * @type {Function}\n  * @category utility\n  * @param {string} string - String to be broken up.\n  * @returns {Array} - Array used to go through object chain.\n  *\n  * @example\n  * toPath('post.like[2]');\n  * // => ['post', 'like', '2']\n*/\nexport const toPath = (string) => {\n  return string.replace(regexCloseBracket, emptyString).split(regexToPath);\n};\nassign(acid, {\n  toPath,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { hasValue } from '../internal/is';\nlet count = 0;\nconst uidFree = [];\nconst uidClosed = {};\n/**\n  * Creates a numerical unique ID and recycles old ones. UID numerically ascends however freed UIDs are later reused.\n  *\n  * @function uid\n  * @category utility\n  * @type {Function}\n  * @category utility\n  * @returns {number} - Returns a unique id.\n  *\n  * @example\n  * uid();\n  * // => 0\n  * @example\n  * uid();\n  * // => 1\n*/\nexport const uid = () => {\n  let result = uidFree.shift(uidFree);\n  if (!hasValue(result)) {\n    result = count;\n    uidClosed[result] = true;\n    count++;\n  }\n  return result;\n};\n/**\n  * Frees an UID so that it may be recycled for later use.\n  *\n  * @function free\n  * @memberof uid\n  * @type {Function}\n  * @param {number} id - Number to be freed.\n  * @returns {undefined} - Nothing is returned.\n  *\n  * @example\n  * uid();\n  * // => 0\n  * @example\n  * uid();\n  * // => 1\n  * @example\n  * uid.free(0);\n  * // => undefined\n  * @example\n  * uid();\n  * // => 0\n*/\nconst free = (id) => {\n  uidClosed[id] = null;\n  uidFree.push(id);\n};\nuid.free = free;\nassign(acid, {\n  uid,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { hasValue } from '../internal/is';\nimport { toPath } from '../utility/toPath';\nimport { whileArray } from '../array/each';\n/**\n  * Returns property on an object.\n  *\n  * @function get\n  * @category utility\n  * @type {Function}\n  * @param  {string} propertyString - String used to retrieve properties.\n  * @param {Object} objectChain - Object which has a property retrieved from it.\n  * @returns {Object} - Returns property from the given object.\n  *\n  * @example\n  * get('post.like[2]', {\n  *   post: {\n  *     like: ['a','b','c']\n  *   }\n  * });\n  * // => c\n*/\nexport const get = (propertyString, objectChain = acid) => {\n  let link = objectChain;\n  whileArray(toPath(propertyString), (item) => {\n    link = link[item];\n    return hasValue(link);\n  });\n  return link;\n};\nassign(acid, {\n  get\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { get } from './get';\nimport { hasValue } from '../internal/is';\n/**\n  * Set & Get a model.\n  *\n  * @function model\n  * @type {Function}\n  * @category utility\n  * @param {string} modelName - Name of the model.\n  * @property {Object} - The model object.\n  * @returns {*} Returns the associated model.\n  *\n  * @example\n  * model('test', {a: 1});\n  * // => {a: 1}\n  * @example\n  * model('test');\n  * // => {a: 1}\n*/\nexport const model = (modelName, object) => {\n  if (hasValue(object)) {\n    model[modelName] = object;\n  }\n  return get(modelName, model);\n};\nacid.superMethod(model);\nassign(acid, {\n  model\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { isEqual } from './isEqual';\n/**\n  * Performs a toggle between 2 values using a deep or strict comparison.\n  *\n  * @function toggle\n  * @type {Function}\n  * @category utility\n  * @param  {(string|number|Object|Array)} value - Strictly compared against the on argument.\n  * @param {(string|number|Object|Array)} on -  Strictly compared against the value argument.\n  * @param {(string|number|Object|Array)} off -  Value to be returned.\n  * @returns {(string|number|Object|Array)} - The opposing value to the current.\n  *\n  * @example\n  * toggle(1, 2, 3);\n  * // => 2\n*/\nexport const toggle = (value, on, off) => {\n  return (isEqual(on, value)) ? off : on;\n};\nassign(acid, {\n  toggle\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachArray, eachArrayRight } from '../array/each';\nconst returnFlow = (callable) => {\n  return (...methods) => {\n    return (arg) => {\n      let value = arg;\n      callable(methods, (item) => {\n        value = item(value);\n      });\n      return value;\n    };\n  };\n};\n/**\n  * Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.\n  *\n  * @function flow\n  * @category utility\n  * @type {Function}\n  * @param {Array} collection - Methods to invoke.\n  * @returns {Function} Returns the new composite function.\n  *\n  * @example\n  * flow(increment, increment, deduct)(0);\n  * // => 2\n*/\nexport const flow = returnFlow(eachArray);\n/**\n  * This method is like flow except that it creates a function that invokes the given functions from right to left.\n  *\n  * @function flowRight\n  * @category utility\n  * @type {Function}\n  * @param {Array} collection - Methods to invoke.\n  * @returns {Function} Returns the new composite function.\n  *\n  * @example\n  * flowRight(increment, increment, deduct)(0);\n  * // => 2\n*/\nexport const flowRight = returnFlow(eachArrayRight);\nassign(acid, {\n  flow,\n  flowRight,\n});\n","import acid from '../namespace/index';\nimport { assign } from '../internal/object';\nimport { eachAsync, eachAsyncRight } from '../array/eachAsync';\nconst returnFlow = (callable) => {\n  return (...methods) => {\n    return async (arg) => {\n      let value = arg;\n      await callable(methods, async (item) => {\n        value = await item(value);\n      });\n      return value;\n    };\n  };\n};\n/**\n  * Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.\n  *\n  * @function flowAsync\n  * @category utility\n  * @type {Function}\n  * @async\n  * @param {Array} collection - Methods to invoke.\n  * @returns {Function} Returns the new composite function.\n  *\n  * @example\n  * flowAsync(increment, increment, deduct)(0);\n  * // => 2\n*/\nexport const flowAsync = returnFlow(eachAsync);\n/**\n  * This method is like flow except that it creates a function that invokes the given functions from right to left.\n  *\n  * @function flowRightAsync\n  * @category utility\n  * @type {Function}\n  * @async\n  * @param {Array} collection - Methods to invoke.\n  * @returns {Function} Returns the new composite function.\n  *\n  * @example\n  * flowRightAsync(increment, increment, deduct)(0);\n  * // => 2\n*/\nexport const flowAsyncRight = returnFlow(eachAsyncRight);\nassign(acid, {\n  flowAsync,\n  flowAsyncRight,\n});\n"],"names":["objectNative","acid","keys","add","spaceFirstLetter","returnFlow"],"mappings":"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"}